<FAQ-SECTION name="Platform Compatibility">

<FAQ question="Does IIOP.NET work with Microsoft's .NET 1.1?">

<p> Yes, it does. This is in fact the platform it was developed on.
</FAQ>

<FAQ question="Does IIOP.NET work with Microsoft's Windows CE .NET (Compact Framework)?">

<p> No, because Windows CE .NET has no remoting support at all.</p>
</FAQ>

<FAQ question="Does IIOP.NET support Visual Studio's Intellisense?">

<p>Visual Studio's Intellisense is fully supported since release 1.6.0; previous releases did only work with VB.NET.

</FAQ>

<FAQ question="Does IIOP.NET work with mono?">

<p>
Currently (mono 0.28) not, but only few features are missing. 
We are regularly testing IIOP.NET against the mono CVS and reporting the problems we find to the mono team. 

<p>We expect IIOP.NET to work on Mono pretty soon.
</FAQ>
</FAQ-SECTION>
<FAQ-SECTION name="ORB Compatibility">

<FAQ question="Can IIOP.NET interoperate with BEA WebLogic 6.1?">

<p>
Yes, it can.
Some hints are provided in the <a href="ejbInterop.html">EJB example tutorial</a> and in 
the <a href="weblogic6_1.html">WebLogic 6.1 interoperation howto</a>.
</FAQ>

<FAQ question="Can IIOP.NET interoperate with BEA WebLogic 8.1?">

<p>
Yes, it can.
Some hints are provided in the <a href="weblogic8_1.html">Weblogic 8.1 interoperation howto</a>.
</FAQ>

<FAQ question="Can IIOP.NET interoperate with IBM Websphere 4?">

<p>
Yes, it can.
Some hints are provided in the <a href="websphere4.html">Websphere 4 interoperation howto</a>.

</FAQ>
<FAQ question="Can IIOP.NET interoperate with IBM Websphere 5?">

<p>
Yes, it can.
Some hints are provided in the <a href="websphere5.html">Websphere 5 interoperation howto</a>.

</FAQ>
<FAQ question="Can IIOP.NET interoperate with JBoss 3.2?">

<p>
Yes, it can.
Some hints are provided in the <a href="jboss3_2.html">JBoss 3.2 interoperation howto</a>.

</FAQ>
</FAQ-SECTION>
<FAQ-SECTION name="Configuration">

<FAQ question="Can the IIOP.NET sources be compiled without any configuration?">
<p>
To compile the tutorials, you must copy the files <em>ir.idl</em> and <em>orb.idl</em>
in the <em>./IDL</em> directory before compiling the tutorials. You will find 
these two files as part of your Java SDK in the <em>%JAVA_HOME%\lib</em> directory.

<p>
To compile parts of the project, the makefile requires some 
environment variables to be set:
<table>
	<tr>
		<td>WAS_HOME</td>
		<td>WebSphere 5 application server path<br>
			used by Examples\EBJChatRoom\WebSphere_5\
			and the IntegrationTests
		</td>
	</tr>
	<tr>
		<td>JBOSS_HOME</td>
		<td>	JBoss 3.2.1 application server path<br>
			used by Examples\EBJChatRoom\JBoss3.2.1\
			and the IntegrationTests
		</td>
	</tr>
	<tr>
		<td>NUNITV2_HOME</td>
		<td>	NUnit V2 path<br>
			used by IIOPChannel unit tests and for 
			the IntegrationTests
		</td>
	</tr>
	<tr>
		<td>JUNIT_HOME</td>
		<td>	JUnit path<br>
			used by the IntegrationTests
		</td>
	</tr>
</table>

</FAQ>
<FAQ question="Can the IIOP.NET channel be configured with a config-file?">
<p>
Yes, it can. <BR> <BR>
Example:
<BR>

The following config file 

<pre>
    &lt;configuration&gt;
      &lt;system.runtime.remoting&gt;
        &lt;application&gt;
          &lt;channels&gt;
            &lt;channel type="Ch.Elca.Iiop.IiopChannel,IiopChannel" port="8087"/&gt;
          &lt;/channels&gt;
        &lt;/application&gt;
      &lt;/system.runtime.remoting&gt;
    &lt;/configuration&gt;
</pre>
<p/>

<p>is equivalent to the following:

<pre>
    // register the channel
    IiopChannel chan = new IiopChannel(8087);
    ChannelServices.RegisterChannel(chan);

</pre>
<p> The config file is processed with: <BR>
<pre>
    RemotingConfiguration.Configure(configFile);
</pre>

</FAQ>
<FAQ question="How do I configure NUnit V2.0 to use the .NET Framework 1.1?">

<p>
Add the following configuration lines in the files <code>%NUnit2%\bin\nunit-console.exe.config</code> and <code>%NUnit2%\bin\nunit-gui.exe.config</code>:

<pre>
  &lt;startup&gt; 
    &lt;supportedRuntime version="v1.1.4322" /&gt; 
  &lt;/startup&gt; 
</pre>

</FAQ>
</FAQ-SECTION>
<FAQ-SECTION name="Usage">

<FAQ question="How do I use the IDLToCLSCompiler?">

<p>The IDLToCLSCompiler creates the .NET proxies for one or more IDL files.

<pre>
  IDLToCLSCompiler [options] target_assembly idl-files...
  
  target_assembly   is the name of the target assembly without .dll
  idl-files         one or more idl files containg OMG IDL definitions
  
  options are
  -h               help
  -o directory     output directory (default is `-o .`)
  -r assembly      assemblies to check for types in, instead of generating them
  -c xmlfile       specifies custom mappings
  -d define        defines a preprocessor symbol
  -idir directory  directory containing idl files (multiple -idir allowed)
  -vtSkel          enable creation of value type implementation skeletons
  -vtSkelProv      the fully qualified name of the codedomprovider to use for value type skeleton generation
  -vtSkelTd        the targetDirectory for generated valuetype impl skeletons
  -vtSkelO         overwrite already present valuetype skeleton implementations
  -snk             sign key file (used for generating strong named assemblies)
  -delaySign       delay signing of assembly (snk file contains only a pk)
</pre>

<p><strong>Examples:</strong>

<ul>
<dl>
<dt>
<pre>IDLToCLSCompiler proxy def.idl</pre>
</dt><dd>
generate <code>proxy.dll</code> from <code>def.idl</code> in the current directory.
</dd>

<dt><pre>IDLToCLSCompiler proxy def1.idl def2.idl</pre>
</dt><dd>
generate <code>proxy.dll</code> from <code>def1.idl</code> and <code>def2.idl</code> in the current directory.
</dd>

<dt><pre>IDLToCLSCompiler -o bin proxy def.idl</pre>
</dt><dd>
generate <code>proxy.dll</code> from <code>def.idl</code> in the directory <code>bin</code>.
</dd>

<dt><pre>IDLToCLSCompiler -o bin -idir c:\IDL -idir d:\IDL proxy def.idl</pre>
</dt><dd>
generate <code>proxy.dll</code> from <code>def.idl</code> in the directory <code>bin</code>; search for imported idl files in <code>c:\IDL</code> and <code>d:\IDL</code>.
</dd>

<dt><pre>IDLToCLSCompiler -d IIOPNet proxy def.idl</pre>
</dt><dd>
generate <code>proxy.dll</code> from <code>def.idl</code> in the current directory; the symbol "IIOPNet" is defined for the IDL preprocessor
</dd>
</dl>
</ul>

<p><strong>Notes:</strong>

<p>The compiler will warn you that you must provide the implementation for the classes implementing the CORBA valuetypes. The article <a href="http://www.codeproject.com/csharp/iiop_net_and_EJB.asp">Accessing an EJB from .NET Using IIOP.NET: an Example</a> contains a detailed explanation and example (see step 4).

<p>

</FAQ>
<FAQ question="How do I configure IIOP.NET to generate debug information?">

<strong>Availability: November 6th 2003 (CVS); release 1.5.1</strong>

<p>The IIOP.NET channel must be recompiled with <code>/debug+ /d:DEBUG /d:TRACE</code> to enable the debugging code; using nmake:
<pre>
	nmake rebuild-base-debug
</pre>
<p>This will delete the channel's binaries and recompile them with debug enabled.

<p>You can now recompile the example or code that need inspection and execute it. After execution, you will find in the same directory a file named <strong>IIOPNET_DebugOutput_<i>timestamp</i></strong> containing additional information.

<p>After debugging remember to recompile the channel without debugging, as this can generate fairly big trace files whenever used:
<pre>
	nmake rebuild-base
</pre>

</FAQ>
</FAQ-SECTION>
<FAQ-SECTION name="Accessing CORBA objects from IIOP.NET">

<FAQ question="How can I access an object using its stringified IOR?">

<p>
The following Code reads an stringified IOR from the file iorfile and creates a proxy for
the remote object represented by the IOR:

<pre>
    StreamReader stream = new StreamReader(iorfile);
    String ior = stream.ReadLine();
    MyRemoteObjectIF remoteObject = 
        (MyRemoteObjectIF)RemotingServices.Connect(typeof(MyRemoteObjectIF), ior);
</pre>

</FAQ>
<FAQ question="How can I get the stringified IOR from a proxy object?">

<p>
The following method (from Ch.Elca.Iiop in IIOPChannel.dll) returns the stringified IOR of a remote object, given its local proxy:

<pre>
    String ior = ProxyHelper.GetIorForProxy(proxy);
</pre>

<p>This won't obviously work, when the proxy is created manually with RemotingServices.Connect using a .NET URI or a corbaloc URI. In this case the above call will return the URI used in Connect.

</FAQ>
<FAQ question="How can I access an object using its corbaloc:iiop address?">

<p>
The following code creates a proxy for the remote object represented by the given corbaloc:

<pre>
    string loc = "corbaloc::localhost:3528/myobject";
    MyRemoteObjectIF remoteObject = 
        (MyRemoteObjectIF)RemotingServices.Connect(typeof(MyRemoteObjectIF), loc);
</pre>

<p> Note: This feature is only available in IIOP.NET 1.4.0 and above.



</FAQ>
<FAQ question="How do I implement a callback?">

<p> IIOP.NET contains two examples using callbacks:
<ul>
<dl>
	<dt><pre>Examples\Callback\ChatroomInterDN</pre></dt>
	<dd>shows using a callback in a scenario with an IIOP.NET client and an IIOP.NET server</dd>

	<dt><pre>Examples\EJBChatRoom</pre></dt>
	<dd>contains a similar example with an IIOP.NET client and various J2EE application servers; this example is explained in detail in the <a href="http://www.codeproject.com/">Code Project</a>'s article <a href="http://www.codeproject.com/useritems/iiop_net_and_EJB.asp">Accessing an EJB from .NET Using IIOP.NET: an Example</a></dd>

</dl>
</ul>

<p> For each callback, ensure that the following points are fullfilled:
<ul>
	<li>The callback implementation class must inherhit from <em>MarshalByRefObject</em>
	<li>The callback implementation class must implement the callback interface
	<li>The callback implementation class must have the <em>SupportedInterfaceAttribute</em>:
<pre>
  [SupportedInterfac(typeof(CallbackInterface)]
  public class CallbackImpl : CallbackInterface {
       // ...
  }
</pre>
<li>Use an <em>IiopChannel</em> to allow the client to receive the server's messages (using only an <em>IIOPClientChannel</em> won't work):
<pre>
  int callbackPort = 0; // automatic assignement
  IiopChannel chan = new IiopChannel(callbackPort);
  ChannelServices.RegisterChannel(chan);
  </pre>
</ul> 


</FAQ>

<FAQ question="How do I implement a command pattern?">
<p>In the command pattern, you pack the command to execute in a
parametrized data-structure (usually a CORBA value-type) and pass it to the 
server, which provides one method that accepts and executes all command types.

<p>You can find an example in <code>Examples/EJBCommandPattern/</code>

<p>A few remarks to the server implementation:
<ul>
<li>Define the abstract <code>Command</code> class as <code>Serializable</code>
<li>All commands classes inherit from Command
<li>The EJB has method <code>execute</code> with takes at least one parameter of type <code>Command</code>
(thus acceps all types that are compatible with Command)
<li>To provide a nice object-oriented implementation, every command
has a method execute to perform the command; the EJB only forward the call to this
method (no huge switch-statement needed). We hide this method to the client by creating
the IDL of the base command class with the option <code>-noValueMethods</code> (note that all other
command classes should be compiled as usual, using <code>-noValueMethods</code> would hide all their
getter and setter methods making them much more difficult to implement).
</ul>

<img src="images/EJBCommandPatternJavaSide.gif" alt="Command pattern, EJB Java-Server side">

<p>A few remarks to the client implementation
<ul>
<li>For each command, a new instance of the appropriate command class must be instantiated
<li>The response from the server is in a different instance as the one sent to it (these are
value-types, every operation creates a new instance!)
<li>Here's an example of a simple operation (a command to perform an addition):
<pre>
int PerformAddition(int val1, int val2) {
  DyadicOp cmd = new AddOpImpl();
  cmd.operand1 = val1;
  cmd.operand2 = val2;
  DyadicOp result = (DyadicOp)m_commandTarget.executeCommand(cmd);
  return result.result;
}
</pre>
</ul>

<img src="images/EJBCommandPatternNETSide.gif" alt="Command pattern, NET-Client side">

</FAQ>

<FAQ question="How do I implement the _is_a test?">
<p><code>_is_a</code> is currently rudimentary supported. The <code>_is_a</code> test can be done in the following (cumbersome) way:
<pre>
    bool isA = ((omg.org.CORBA.IObject)proxy)._is_a(
        Ch.Elca.Iiop.Idl.Repository.GetRepositoryID(typeof(InterfaceType)));
</pre>

<p>Please avoid this pattern if you can, as we are going to provide a simpler and better integrated implentation for <code>_is_a</code>.

</FAQ>
</FAQ-SECTION>

<FAQ-SECTION name="Accessing .NET Objects from CORBA with IIOP.NET">

<FAQ question="How do I implement the CORBA USER_ID and SYSTEM_ID policies?">

<p>By default, .NET uses the SYSTEM_ID policy, i.e. it assigns some random name to the object (a windows GUID I guess).
You can override this behaviour and implement the USER_ID policy by registering the servant with RemotingServices.Marshal and the name as URI.
Beware that using RemotingServices.Marshal without explicit URI corresponds to the SYSTEM_ID policy.

<p>When remoting an object that has not been explicitely registered, .NET automatically registers it with RemotingServices.Marshall and assigns it a random name (SYSTEM_ID policy).

</FAQ>

<FAQ question="How do I implement the CORBA PERSISTENT policy?">

<p>The PERSISTENT policy assumes the USER_ID policy (the object must be accessible through the same URI).
The persistency must be handled by the servant implementation, which should store the state whenever it changes, and restore it when the servant is created.
</FAQ>

<FAQ question="Do TRANSIENT servants have different IORs?">

<p>TRANSIENT servants receive different IORs as long as you implement them using the SYSTEM_ID policy, i.e. you register them with
<pre>
    RemotingServices.Marshal(servant);  // register, let the system assign a random name 
</pre>
<p>or you do not register them at all, when returning them to the client peer, in which case .NET registers them for you with the above call.

</FAQ>

</FAQ-SECTION>

<FAQ-SECTION name="Frequent Errors (Troubleshooting)">

<FAQ question="Exception: Invalid PInvoke metadata format">

<p>This is usually caused by the some backward incompatibility between the .NET framework 1.0 and 1.1:  the error occurs, when you run an application built for .NET framework 1.0 on the .NET framework 1.1.

<p>A detailed description of the problem and possible solutions can be found here:
</FAQ>


<FAQ question="omg.org.CORBA.NO_IMPLEMENT: CORBA system exception, completed: Completed_MayBe minor: 1">

<p>The marshaller on the .NET-side cannot find the class implementing the valuetype.

<p>Check that:
<ul>
<li>you did implement a class <em>XYZImpl</em>, where <em>XYZ</em> is the type name of the valuetype 
<li><em>XYZImpl</em> inherits from the abstract class XYZ (this class is generated by the IDLToCLSgenerator)
<li><em>XYZImpl</em> is in the same namespace as XYZ
<li><em>XYZImpl</em> is serializable
<li><em>XYZImpl</em> has a parameterless public constructor
<li><em>XYZImpl</em> is not abstract
<li><em>XYZImpl</em> implements all the inherited abstract methods and properties
</ul>

</FAQ>
<FAQ question="omg.org.CORBA.INTF_REPOS: CORBA system exception, completed: Completed_MayBe minor: 1414">

<P>This exception is thrown by IIOP.NET whenever it receives an object reference of an unknown type.
The most common errors are:
<ul>
<li>the required type was not mapped with the IDLToCLSCompiler
<li>the assembly containing the mapped type was not found by IIOP.NET (it must be in the same directory or in the application domain's search path)
</ul>

</FAQ>
<FAQ question="omg.org.CORBA.CODESET_INCOMPATIBLE: CORBA system exception, completed: Completed_No minor: 9501">

<p> Currently, IIOP.NET does only support a limited set of codesets:
<ul>
	<li> Character Sets:
	<ul>
	<li> ISO 8859-1:1987; Latin Alphabet No. 1 </li>
	<li> UTF8 </li>
	<li> ISO 646:1991 IRV (International Reference Version) </li>
	</ul></li>
	<li> Wide Character Sets:
	<ul>
	<li> UTF16 </li>
	<li> ISO/IEC 10646-1:1993; UCS-2, Level 1 </li>
</ul>
</li>
</ul>

<p> If possible, you sould use UTF8, Latin1 or UTF16.

</FAQ>

</FAQ-SECTION>
