/* Generated By:JJTree&JavaCC: Do not edit this line. IDLParserTokenManager.java */
package parser;
import symboltable.*;
import java.util.Stack;

public class IDLParserTokenManager implements IDLParserConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0xbffef80067f19600L) != 0L || (active1 & 0x3ff99L) != 0L)
         {
            jjmatchedKind = 86;
            return 13;
         }
         if ((active1 & 0x80000L) != 0L)
            return 18;
         if ((active0 & 0x4001000000000000L) != 0L || (active1 & 0x340000L) != 0L)
            return 13;
         if ((active0 & 0x10000000000L) != 0L)
            return 55;
         if ((active0 & 0x100L) != 0L)
            return 78;
         return -1;
      case 1:
         if ((active0 & 0xfffff80047f09400L) != 0L || (active1 & 0x3df99L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 86;
               jjmatchedPos = 1;
            }
            return 13;
         }
         if ((active0 & 0x20010200L) != 0L || (active1 & 0x2000L) != 0L)
            return 13;
         return -1;
      case 2:
         if ((active0 & 0x100000000000000L) != 0L || (active1 & 0x1000L) != 0L)
            return 13;
         if ((active0 & 0xfefff80047f19400L) != 0L || (active1 & 0x3ef99L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 2;
            return 13;
         }
         return -1;
      case 3:
         if ((active0 & 0x5eedf00047f19400L) != 0L || (active1 & 0x3e799L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 3;
            return 13;
         }
         if ((active0 & 0xa012080000000000L) != 0L || (active1 & 0x800L) != 0L)
            return 13;
         return -1;
      case 4:
         if ((active0 & 0x5649600007f19400L) != 0L || (active1 & 0x2c799L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 4;
            return 13;
         }
         if ((active0 & 0x8a4900040000000L) != 0L || (active1 & 0x12000L) != 0L)
            return 13;
         return -1;
      case 5:
         if ((active0 & 0x4048200006d18000L) != 0L || (active1 & 0x28391L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 5;
            return 13;
         }
         if ((active0 & 0x1601400001201400L) != 0L || (active1 & 0x4408L) != 0L)
            return 13;
         return -1;
      case 6:
         if ((active0 & 0x8000000d18000L) != 0L || (active1 & 0x20381L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 6;
            return 13;
         }
         if ((active0 & 0x4040200006000000L) != 0L || (active1 & 0x8010L) != 0L)
            return 13;
         return -1;
      case 7:
         if ((active0 & 0x510000L) != 0L || (active1 & 0x20300L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 7;
            return 13;
         }
         if ((active0 & 0x8000000808000L) != 0L || (active1 & 0x81L) != 0L)
            return 13;
         return -1;
      case 8:
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 8;
            return 13;
         }
         if ((active0 & 0x110000L) != 0L || (active1 & 0x20300L) != 0L)
            return 13;
         return -1;
      case 9:
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 9;
            return 13;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 35:
         return jjMoveStringLiteralDfa1_0(0x100L, 0x0L);
      case 37:
         return jjStopAtPos(0, 41);
      case 38:
         return jjStopAtPos(0, 34);
      case 40:
         return jjStopAtPos(0, 27);
      case 41:
         return jjStopAtPos(0, 28);
      case 42:
         return jjStopAtPos(0, 39);
      case 43:
         return jjStopAtPos(0, 37);
      case 44:
         return jjStopAtPos(0, 18);
      case 45:
         return jjStopAtPos(0, 38);
      case 46:
         return jjStartNfaWithStates_0(0, 83, 18);
      case 47:
         return jjStartNfaWithStates_0(0, 40, 55);
      case 58:
         jjmatchedKind = 17;
         return jjMoveStringLiteralDfa1_0(0x80000L, 0x0L);
      case 59:
         return jjStopAtPos(0, 11);
      case 60:
         jjmatchedKind = 65;
         return jjMoveStringLiteralDfa1_0(0x1000000000L, 0x0L);
      case 61:
         return jjStopAtPos(0, 31);
      case 62:
         jjmatchedKind = 66;
         return jjMoveStringLiteralDfa1_0(0x800000000L, 0x0L);
      case 68:
         return jjStartNfaWithStates_0(0, 85, 13);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x100000000000L, 0x0L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x200L, 0x0L);
      case 76:
         return jjStartNfaWithStates_0(0, 82, 13);
      case 79:
         return jjMoveStringLiteralDfa1_0(0x200000000000000L, 0x0L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x80000000000L, 0x0L);
      case 86:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20000L);
      case 91:
         return jjStopAtPos(0, 69);
      case 93:
         return jjStopAtPos(0, 70);
      case 94:
         return jjStopAtPos(0, 33);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x100000000008000L, 0x100L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x40000000000000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x2010000040200000L, 0x8000L);
      case 100:
         jjmatchedKind = 84;
         return jjMoveStringLiteralDfa1_0(0x4001000000000000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x8000000000000000L, 0x200L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x800004000000L, 0x10000L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x20010000L, 0x2000L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x2000000000000L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x1000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x400000000000L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x80000000000000L, 0x1400L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x3000400L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4080L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x1404000000800000L, 0x9L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x200000400000L, 0x0L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x808000000000000L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x100000L, 0x800L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x20000000000000L, 0x10L);
      case 123:
         return jjStopAtPos(0, 13);
      case 124:
         return jjStopAtPos(0, 32);
      case 125:
         return jjStopAtPos(0, 14);
      case 126:
         return jjStopAtPos(0, 42);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 58:
         if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(1, 19);
         break;
      case 60:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(1, 36);
         break;
      case 62:
         if ((active0 & 0x800000000L) != 0L)
            return jjStopAtPos(1, 35);
         break;
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000000L, active1, 0L);
      case 68:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(1, 9, 13);
         break;
      case 82:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000400004100000L, active1, 0x24000L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000008000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0xa0000000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000000000L, active1, 0x81L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x14000000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x10000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000L, active1, 0L);
      case 110:
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x8908000000010000L, active1, 0x2400L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x43000040001000L, active1, 0x8800L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x100L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x2400400L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x10L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000000L, active1, 0x108L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x1a00000L, active1, 0x1000L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000000000L, active1, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x200L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 76:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000000L, active1, 0L);
      case 85:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000000L, active1, 0x80L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000L, active1, 0x200L);
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x400L, active1, 0x400L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000000L, active1, 0L);
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x1800000002000000L, active1, 0x4800L);
      case 106:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000L, active1, 0x20000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000040000000L, active1, 0x8000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x44800000000000L, active1, 0x2000L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000800000L, active1, 0L);
      case 113:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000100L, active1, 0x8L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x2008000000208000L, active1, 0L);
      case 116:
         if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(2, 76, 13);
         return jjMoveStringLiteralDfa3_0(active0, 0x80400000010000L, active1, 0x110L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x8001000000400000L, active1, 0L);
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10000L);
      case 121:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 56, 13);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 69:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 43, 13);
         break;
      case 83:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x4020800000000100L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000L, active1, 0L);
      case 100:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(3, 75, 13);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x80L);
      case 101:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 61, 13);
         return jjMoveStringLiteralDfa4_0(active0, 0x280200000010000L, active1, 0x10200L);
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0x400L, active1, 0L);
      case 103:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 49, 13);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x8400000000000L, active1, 0x8L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000001000000L, active1, 0L);
      case 109:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 63, 13);
         break;
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000000000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000L, active1, 0L);
      case 114:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 52, 13);
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000L, active1, 0x110L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000L, active1, 0x4000L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000004208000L, active1, 0x8000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000101000L, active1, 0x22001L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x400L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 69:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 44, 13);
         break;
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000L, active1, 0x400L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x1600000000400000L, active1, 0L);
      case 100:
         if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(4, 80, 13);
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000100000L, active1, 0x2c001L);
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000100L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000400L, active1, 0x110L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000001000L, active1, 0L);
      case 110:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 59, 13);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x4a00000L, active1, 0x80L);
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x200L);
      case 114:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 53, 13);
         return jjMoveStringLiteralDfa5_0(active0, 0x18000L, active1, 0L);
      case 116:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(4, 30, 13);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 47, 13);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 50, 13);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 55, 13);
         else if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(4, 77, 13);
         break;
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000000000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 66:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x20000L);
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000408000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x100L);
      case 99:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(5, 24, 13);
         break;
      case 101:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(5, 12, 13);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 46, 13);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 48, 13);
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000000L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000L, active1, 0L);
      case 103:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(5, 67, 13);
         break;
      case 104:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 60, 13);
         break;
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000000000L, active1, 0L);
      case 109:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(5, 21, 13);
         return jjMoveStringLiteralDfa6_0(active0, 0x100L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000000L, active1, 0x91L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x4800000L, active1, 0L);
      case 115:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(5, 78, 13);
         break;
      case 116:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 57, 13);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 58, 13);
         return jjMoveStringLiteralDfa6_0(active0, 0x2100000L, active1, 0x200L);
      case 120:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(5, 10, 13);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x8000L);
      case 121:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(5, 74, 13);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(6, 8);
         return jjMoveStringLiteralDfa7_0(active0, 0x10000L, active1, 0x20000L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000L, active1, 0x1L);
      case 101:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(6, 25, 13);
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000000L, active1, 0L);
      case 102:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 45, 13);
         break;
      case 103:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(6, 68, 13);
         break;
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x200L);
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x80L);
      case 110:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 54, 13);
         break;
      case 116:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 62, 13);
         else if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(6, 79, 13);
         return jjMoveStringLiteralDfa7_0(active0, 0xc00000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x100L);
      case 121:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(6, 26, 13);
         return jjMoveStringLiteralDfa7_0(active0, 0x100000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000L, active1, 0L);
      case 100:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 51, 13);
         break;
      case 101:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(7, 64, 13);
         break;
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x200L);
      case 112:
         return jjMoveStringLiteralDfa8_0(active0, 0x100000L, active1, 0L);
      case 115:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(7, 23, 13);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x20000L);
      case 116:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(7, 15, 13);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x100L);
      case 121:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(7, 71, 13);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1);
      return 8;
   }
   switch(curChar)
   {
      case 98:
         return jjMoveStringLiteralDfa9_0(active0, 0x400000L, active1, 0L);
      case 101:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(8, 16, 13);
         else if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(8, 20, 13);
         else if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(8, 72, 13);
         else if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(8, 81, 13);
         break;
      case 110:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(8, 73, 13);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa10_0(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(10, 22, 13);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 78;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 55:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(59, 60);
                  else if (curChar == 47)
                     jjCheckNAddTwoStates(56, 57);
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 5);
                  else if (curChar == 47)
                     jjAddStates(6, 7);
                  else if (curChar == 34)
                     jjCheckNAddStates(8, 10);
                  else if (curChar == 39)
                     jjAddStates(11, 12);
                  else if (curChar == 46)
                     jjCheckNAdd(18);
                  else if (curChar == 35)
                     jjCheckNAddTwoStates(1, 2);
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 88)
                        kind = 88;
                     jjCheckNAddStates(13, 15);
                  }
                  else if (curChar == 48)
                     jjAddStates(16, 17);
                  if (curChar == 48)
                  {
                     if (kind > 87)
                        kind = 87;
                     jjCheckNAddTwoStates(15, 16);
                  }
                  break;
               case 78:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(18, 21);
                  else if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(1, 2);
                  break;
               case 1:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(1, 2);
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(18, 21);
                  break;
               case 3:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(3, 4);
                  break;
               case 4:
                  if (curChar == 34)
                     jjCheckNAdd(5);
                  break;
               case 5:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(5, 6);
                  break;
               case 6:
                  if (curChar == 34)
                     jjCheckNAddStates(22, 24);
                  break;
               case 7:
                  if (curChar == 10 && kind > 7)
                     kind = 7;
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(25, 28);
                  break;
               case 9:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddStates(29, 31);
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(10, 7);
                  break;
               case 11:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddStates(32, 36);
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 86)
                     kind = 86;
                  jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 14:
                  if (curChar != 48)
                     break;
                  if (kind > 87)
                     kind = 87;
                  jjCheckNAddTwoStates(15, 16);
                  break;
               case 15:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 87)
                     kind = 87;
                  jjCheckNAddTwoStates(15, 16);
                  break;
               case 17:
                  if (curChar == 46)
                     jjCheckNAdd(18);
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 90)
                     kind = 90;
                  jjCheckNAddStates(37, 39);
                  break;
               case 20:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(21);
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 90)
                     kind = 90;
                  jjCheckNAddTwoStates(21, 22);
                  break;
               case 23:
                  if (curChar == 39)
                     jjAddStates(11, 12);
                  break;
               case 24:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAdd(25);
                  break;
               case 25:
                  if (curChar == 39 && kind > 92)
                     kind = 92;
                  break;
               case 27:
                  if ((0x8000008400000000L & l) != 0L)
                     jjCheckNAdd(25);
                  break;
               case 28:
                  if (curChar == 48)
                     jjCheckNAddTwoStates(29, 25);
                  break;
               case 29:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(29, 25);
                  break;
               case 30:
                  if ((0x3fe000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(31, 25);
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(31, 25);
                  break;
               case 32:
                  if (curChar == 48)
                     jjAddStates(40, 41);
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(34, 25);
                  break;
               case 36:
                  if (curChar == 34)
                     jjCheckNAddStates(8, 10);
                  break;
               case 37:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(8, 10);
                  break;
               case 39:
                  if ((0x8000008400000000L & l) != 0L)
                     jjCheckNAddStates(8, 10);
                  break;
               case 40:
                  if (curChar == 34 && kind > 93)
                     kind = 93;
                  break;
               case 41:
                  if (curChar == 48)
                     jjCheckNAddStates(42, 45);
                  break;
               case 42:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(42, 45);
                  break;
               case 43:
                  if ((0x3fe000000000000L & l) != 0L)
                     jjCheckNAddStates(46, 49);
                  break;
               case 44:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(46, 49);
                  break;
               case 45:
                  if (curChar == 48)
                     jjAddStates(50, 51);
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(52, 55);
                  break;
               case 49:
                  if (curChar == 48)
                     jjAddStates(16, 17);
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 89)
                     kind = 89;
                  jjAddStates(56, 57);
                  break;
               case 54:
                  if (curChar == 47)
                     jjAddStates(6, 7);
                  break;
               case 56:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     jjCheckNAddTwoStates(56, 57);
                  break;
               case 57:
                  if (curChar == 10 && kind > 5)
                     kind = 5;
                  break;
               case 58:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(59, 60);
                  break;
               case 59:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(59, 60);
                  break;
               case 60:
                  if (curChar == 42)
                     jjAddStates(58, 59);
                  break;
               case 61:
                  if ((0xffff7fffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(62, 60);
                  break;
               case 62:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(62, 60);
                  break;
               case 63:
                  if (curChar == 47 && kind > 6)
                     kind = 6;
                  break;
               case 64:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 88)
                     kind = 88;
                  jjCheckNAddStates(13, 15);
                  break;
               case 65:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 88)
                     kind = 88;
                  jjCheckNAddTwoStates(65, 66);
                  break;
               case 67:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 94)
                     kind = 94;
                  jjCheckNAdd(67);
                  break;
               case 68:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 5);
                  break;
               case 69:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(69, 70);
                  break;
               case 70:
                  if (curChar != 46)
                     break;
                  if (kind > 90)
                     kind = 90;
                  jjCheckNAddStates(60, 62);
                  break;
               case 71:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 90)
                     kind = 90;
                  jjCheckNAddStates(60, 62);
                  break;
               case 72:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(72, 17);
                  break;
               case 73:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(73, 74);
                  break;
               case 75:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(76);
                  break;
               case 76:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 91)
                     kind = 91;
                  jjCheckNAddTwoStates(76, 77);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 13:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 86)
                     kind = 86;
                  jjCheckNAdd(13);
                  break;
               case 5:
                  jjAddStates(63, 64);
                  break;
               case 16:
                  if ((0x20100000201000L & l) != 0L && kind > 87)
                     kind = 87;
                  break;
               case 19:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(65, 66);
                  break;
               case 22:
                  if ((0x104000001040L & l) != 0L && kind > 90)
                     kind = 90;
                  break;
               case 24:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(25);
                  break;
               case 26:
                  if (curChar == 92)
                     jjAddStates(67, 70);
                  break;
               case 27:
                  if ((0x54404610000000L & l) != 0L)
                     jjCheckNAdd(25);
                  break;
               case 33:
                  if (curChar == 120)
                     jjCheckNAdd(34);
                  break;
               case 34:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddTwoStates(34, 25);
                  break;
               case 35:
                  if (curChar == 88)
                     jjCheckNAdd(34);
                  break;
               case 37:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(8, 10);
                  break;
               case 38:
                  if (curChar == 92)
                     jjAddStates(71, 74);
                  break;
               case 39:
                  if ((0x54404610000000L & l) != 0L)
                     jjCheckNAddStates(8, 10);
                  break;
               case 46:
                  if (curChar == 120)
                     jjCheckNAdd(47);
                  break;
               case 47:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(52, 55);
                  break;
               case 48:
                  if (curChar == 88)
                     jjCheckNAdd(47);
                  break;
               case 50:
                  if (curChar == 120)
                     jjCheckNAdd(51);
                  break;
               case 51:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 89)
                     kind = 89;
                  jjCheckNAddTwoStates(51, 52);
                  break;
               case 52:
                  if ((0x20100000201000L & l) != 0L && kind > 89)
                     kind = 89;
                  break;
               case 53:
                  if (curChar == 88)
                     jjCheckNAdd(51);
                  break;
               case 56:
                  jjAddStates(75, 76);
                  break;
               case 59:
                  jjCheckNAddTwoStates(59, 60);
                  break;
               case 61:
               case 62:
                  jjCheckNAddTwoStates(62, 60);
                  break;
               case 66:
                  if ((0x20100000201000L & l) != 0L && kind > 88)
                     kind = 88;
                  break;
               case 74:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(77, 78);
                  break;
               case 77:
                  if ((0x104000001040L & l) != 0L && kind > 91)
                     kind = 91;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 5:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(63, 64);
                  break;
               case 24:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 37:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(8, 10);
                  break;
               case 56:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(75, 76);
                  break;
               case 59:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(59, 60);
                  break;
               case 61:
               case 62:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(62, 60);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 78 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   69, 70, 72, 17, 73, 74, 55, 58, 37, 38, 40, 24, 26, 65, 66, 67, 
   50, 53, 2, 3, 4, 7, 7, 8, 11, 9, 10, 7, 8, 9, 10, 7, 
   9, 10, 7, 8, 11, 18, 19, 22, 33, 35, 37, 38, 42, 40, 37, 38, 
   44, 40, 46, 48, 37, 38, 47, 40, 51, 52, 61, 63, 71, 19, 22, 5, 
   6, 20, 21, 27, 28, 30, 32, 39, 41, 43, 45, 56, 57, 75, 76, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default : 
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, "\43\160\162\141\147\155\141", 
"\111\104", "\160\162\145\146\151\170", "\73", "\155\157\144\165\154\145", "\173", "\175", 
"\141\142\163\164\162\141\143\164", "\151\156\164\145\162\146\141\143\145", "\72", "\54", "\72\72", 
"\166\141\154\165\145\164\171\160\145", "\143\165\163\164\157\155", "\164\162\165\156\143\141\164\141\142\154\145", 
"\163\165\160\160\157\162\164\163", "\160\165\142\154\151\143", "\160\162\151\166\141\164\145", 
"\146\141\143\164\157\162\171", "\50", "\51", "\151\156", "\143\157\156\163\164", "\75", "\174", "\136", 
"\46", "\76\76", "\74\74", "\53", "\55", "\52", "\57", "\45", "\176", 
"\124\122\125\105", "\106\101\114\123\105", "\164\171\160\145\144\145\146", 
"\156\141\164\151\166\145", "\146\154\157\141\164", "\144\157\165\142\154\145", "\154\157\156\147", 
"\163\150\157\162\164", "\165\156\163\151\147\156\145\144", "\143\150\141\162", 
"\167\143\150\141\162", "\142\157\157\154\145\141\156", "\157\143\164\145\164", "\141\156\171", 
"\117\142\152\145\143\164", "\163\164\162\165\143\164", "\165\156\151\157\156", 
"\163\167\151\164\143\150", "\143\141\163\145", "\144\145\146\141\165\154\164", "\145\156\165\155", 
"\163\145\161\165\145\156\143\145", "\74", "\76", "\163\164\162\151\156\147", "\167\163\164\162\151\156\147", 
"\133", "\135", "\162\145\141\144\157\156\154\171", 
"\141\164\164\162\151\142\165\164\145", "\145\170\143\145\160\164\151\157\156", "\157\156\145\167\141\171", 
"\166\157\151\144", "\157\165\164", "\151\156\157\165\164", "\162\141\151\163\145\163", 
"\143\157\156\164\145\170\164", "\146\151\170\145\144", "\126\141\154\165\145\102\141\163\145", "\114", "\56", 
"\144", "\104", null, null, null, null, null, null, null, null, null, };
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0xffffffffffffff01L, 0x7fffffffL, 
};
static final long[] jjtoSkip = {
   0xfeL, 0x0L, 
};
private JavaCharStream input_stream;
private final int[] jjrounds = new int[78];
private final int[] jjstateSet = new int[156];
protected char curChar;
public IDLParserTokenManager(JavaCharStream stream)
{
   if (JavaCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public IDLParserTokenManager(JavaCharStream stream, int lexState)
{
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(JavaCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 78; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(JavaCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

private final Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public final Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

}
