/* Generated By:JJTree&JavaCC: Do not edit this line. IDLParserTokenManager.java */
package parser;
import symboltable.*;
import java.util.Stack;

public class IDLParserTokenManager implements IDLParserConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0xffef80067f196000L) != 0L || (active1 & 0x3ff99bL) != 0L)
         {
            jjmatchedKind = 90;
            return 13;
         }
         if ((active0 & 0x10000000000000L) != 0L || (active1 & 0x3400004L) != 0L)
            return 13;
         if ((active1 & 0x800000L) != 0L)
            return 15;
         if ((active0 & 0x1000L) != 0L)
            return 68;
         return -1;
      case 1:
         if ((active0 & 0xffff80047f094000L) != 0L || (active1 & 0x3df99fL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 90;
               jjmatchedPos = 1;
            }
            return 13;
         }
         if ((active0 & 0x200102000L) != 0L || (active1 & 0x20000L) != 0L)
            return 13;
         return -1;
      case 2:
         if ((active0 & 0x1000000000000000L) != 0L || (active1 & 0x10000L) != 0L)
            return 13;
         if ((active0 & 0xefff80047f194000L) != 0L || (active1 & 0x3ef99fL) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 2;
            return 13;
         }
         return -1;
      case 3:
         if ((active0 & 0x120800000000000L) != 0L || (active1 & 0x800aL) != 0L)
            return 13;
         if ((active0 & 0xeedf00047f194000L) != 0L || (active1 & 0x3e7995L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 3;
            return 13;
         }
         return -1;
      case 4:
         if ((active0 & 0x649600007f194000L) != 0L || (active1 & 0x2c7995L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 4;
            return 13;
         }
         if ((active0 & 0x8a49000400000000L) != 0L || (active1 & 0x120000L) != 0L)
            return 13;
         return -1;
      case 5:
         if ((active0 & 0x48200006d180000L) != 0L || (active1 & 0x283914L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 5;
            return 13;
         }
         if ((active0 & 0x6014000012014000L) != 0L || (active1 & 0x44081L) != 0L)
            return 13;
         return -1;
      case 6:
         if ((active0 & 0x402000060000000L) != 0L || (active1 & 0x80104L) != 0L)
            return 13;
         if ((active0 & 0x8000000d180000L) != 0L || (active1 & 0x203810L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 6;
            return 13;
         }
         return -1;
      case 7:
         if ((active0 & 0x5100000L) != 0L || (active1 & 0x203000L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 7;
            return 13;
         }
         if ((active0 & 0x80000008080000L) != 0L || (active1 & 0x810L) != 0L)
            return 13;
         return -1;
      case 8:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 8;
            return 13;
         }
         if ((active0 & 0x1100000L) != 0L || (active1 & 0x203000L) != 0L)
            return 13;
         return -1;
      case 9:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 9;
            return 13;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 35:
         return jjMoveStringLiteralDfa1_0(0x1000L, 0x0L);
      case 37:
         return jjStopAtPos(0, 45);
      case 38:
         return jjStopAtPos(0, 38);
      case 40:
         return jjStopAtPos(0, 31);
      case 41:
         return jjStopAtPos(0, 32);
      case 42:
         return jjStopAtPos(0, 43);
      case 43:
         return jjStopAtPos(0, 41);
      case 44:
         return jjStopAtPos(0, 22);
      case 45:
         return jjStopAtPos(0, 42);
      case 46:
         return jjStartNfaWithStates_0(0, 87, 15);
      case 47:
         jjmatchedKind = 44;
         return jjMoveStringLiteralDfa1_0(0x60L, 0x0L);
      case 58:
         jjmatchedKind = 21;
         return jjMoveStringLiteralDfa1_0(0x800000L, 0x0L);
      case 59:
         return jjStopAtPos(0, 15);
      case 60:
         jjmatchedKind = 69;
         return jjMoveStringLiteralDfa1_0(0x10000000000L, 0x0L);
      case 61:
         return jjStopAtPos(0, 35);
      case 62:
         jjmatchedKind = 70;
         return jjMoveStringLiteralDfa1_0(0x8000000000L, 0x0L);
      case 68:
         return jjStartNfaWithStates_0(0, 89, 13);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x1000000000000L, 0x0L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x2000L, 0x0L);
      case 76:
         return jjStartNfaWithStates_0(0, 86, 13);
      case 79:
         return jjMoveStringLiteralDfa1_0(0x2000000000000000L, 0x0L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x800000000000L, 0x0L);
      case 86:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200000L);
      case 91:
         return jjStopAtPos(0, 73);
      case 93:
         return jjStopAtPos(0, 74);
      case 94:
         return jjStopAtPos(0, 37);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x1000000000080000L, 0x1000L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x400000000000000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x100000402000000L, 0x80002L);
      case 100:
         jjmatchedKind = 88;
         return jjMoveStringLiteralDfa1_0(0x10000000000000L, 0x4L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2008L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x8000040000000L, 0x100000L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x200100000L, 0x20000L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x20000000000000L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x10000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x4000000000000L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x800000000000000L, 0x14000L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x30004000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40800L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x4040000008000000L, 0x91L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x2000004000000L, 0x0L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x8080000000000000L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x1000000L, 0x8000L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x200000000000000L, 0x100L);
      case 123:
         return jjStopAtPos(0, 17);
      case 124:
         return jjStopAtPos(0, 36);
      case 125:
         return jjStopAtPos(0, 18);
      case 126:
         return jjStopAtPos(0, 46);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(1, 6);
         break;
      case 47:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(1, 5);
         break;
      case 58:
         if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(1, 23);
         break;
      case 60:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStopAtPos(1, 40);
         break;
      case 62:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStopAtPos(1, 39);
         break;
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000000L, active1, 0L);
      case 68:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(1, 13, 13);
         break;
      case 82:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000041000000L, active1, 0x240002L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000080000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0xa00000000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x814L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x140000000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x100000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000L, active1, 0L);
      case 110:
         if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x9080000000100000L, active1, 0x24008L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x430000400010000L, active1, 0x88000L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x24004000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x100L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000000000L, active1, 0x1080L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x1a000000L, active1, 0x10000L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2000L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 76:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000000L, active1, 0L);
      case 85:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000000000L, active1, 0x800L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000L, active1, 0x2000L);
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000L, active1, 0x4000L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4L);
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000020000000L, active1, 0x48001L);
      case 106:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000L, active1, 0x200000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000400000000L, active1, 0x80000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x448000000000000L, active1, 0x20000L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000008000000L, active1, 0L);
      case 113:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000001000L, active1, 0x80L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000002080000L, active1, 0x2L);
      case 116:
         if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(2, 80, 13);
         return jjMoveStringLiteralDfa3_0(active0, 0x804000000100000L, active1, 0x1100L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000004000000L, active1, 0x8L);
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x100000L);
      case 121:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 60, 13);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 69:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 47, 13);
         break;
      case 83:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x208000000001000L, active1, 0x4L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000000L, active1, 0L);
      case 100:
         if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(3, 79, 13);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x800L);
      case 101:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(3, 65, 13);
         return jjMoveStringLiteralDfa4_0(active0, 0x2802000000100000L, active1, 0x102000L);
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000L, active1, 0L);
      case 103:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 53, 13);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x84000000000000L, active1, 0x80L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000010000000L, active1, 0L);
      case 109:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(3, 67, 13);
         break;
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000000000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000L, active1, 0L);
      case 114:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 56, 13);
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000000L, active1, 0x1100L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000L, active1, 0x40000L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x42080000L, active1, 0x80001L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000001010000L, active1, 0x220010L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 69:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 48, 13);
         break;
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000L, active1, 0x4000L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x6000000004000000L, active1, 0x1L);
      case 100:
         if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(4, 84, 13);
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000001000000L, active1, 0x2c0010L);
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000001000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x10004000L, active1, 0x1100L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000010000L, active1, 0L);
      case 110:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 63, 13);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x80L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x4a000000L, active1, 0x800L);
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2000L);
      case 114:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 57, 13);
         return jjMoveStringLiteralDfa5_0(active0, 0x180000L, active1, 0L);
      case 116:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(4, 34, 13);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 51, 13);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 54, 13);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 59, 13);
         else if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(4, 81, 13);
         break;
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 66:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x200000L);
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000004080000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1000L);
      case 99:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(5, 28, 13);
         break;
      case 101:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(5, 16, 13);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 50, 13);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 52, 13);
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000000L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000L, active1, 0L);
      case 103:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(5, 71, 13);
         break;
      case 104:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(5, 64, 13);
         break;
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x4L);
      case 109:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(5, 25, 13);
         return jjMoveStringLiteralDfa6_0(active0, 0x1000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000000000L, active1, 0x910L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x48000000L, active1, 0L);
      case 115:
         if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(5, 82, 13);
         break;
      case 116:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 61, 13);
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 62, 13);
         return jjMoveStringLiteralDfa6_0(active0, 0x21000000L, active1, 0x2000L);
      case 120:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(5, 14, 13);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x80000L);
      case 121:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(5, 78, 13);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(6, 12);
         return jjMoveStringLiteralDfa7_0(active0, 0x100000L, active1, 0x200000L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000L, active1, 0x10L);
      case 101:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(6, 29, 13);
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000000000L, active1, 0L);
      case 102:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 49, 13);
         break;
      case 103:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(6, 72, 13);
         break;
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2000L);
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x800L);
      case 110:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 58, 13);
         break;
      case 116:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(6, 66, 13);
         else if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(6, 83, 13);
         return jjMoveStringLiteralDfa7_0(active0, 0xc000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1000L);
      case 121:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(6, 30, 13);
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x100000L, active1, 0L);
      case 100:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 55, 13);
         break;
      case 101:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(7, 68, 13);
         break;
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x2000L);
      case 112:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000L, active1, 0L);
      case 115:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(7, 27, 13);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x200000L);
      case 116:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(7, 19, 13);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x1000L);
      case 121:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(7, 75, 13);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1);
      return 8;
   }
   switch(curChar)
   {
      case 98:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000L, active1, 0L);
      case 101:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(8, 20, 13);
         else if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(8, 24, 13);
         else if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(8, 76, 13);
         else if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(8, 85, 13);
         break;
      case 110:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(8, 77, 13);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa10_0(active0, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(10, 26, 13);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 68;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 5);
                  else if (curChar == 34)
                     jjCheckNAddStates(6, 8);
                  else if (curChar == 39)
                     jjAddStates(9, 10);
                  else if (curChar == 46)
                     jjCheckNAdd(15);
                  else if (curChar == 35)
                     jjCheckNAddTwoStates(1, 2);
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 92)
                        kind = 92;
                     jjCheckNAddStates(11, 13);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 92)
                        kind = 92;
                     jjCheckNAdd(52);
                  }
                  if (curChar == 48)
                     jjAddStates(14, 15);
                  break;
               case 68:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(16, 19);
                  else if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(1, 2);
                  break;
               case 1:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(1, 2);
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(16, 19);
                  break;
               case 3:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(3, 4);
                  break;
               case 4:
                  if (curChar == 34)
                     jjCheckNAdd(5);
                  break;
               case 5:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(5, 6);
                  break;
               case 6:
                  if (curChar == 34)
                     jjCheckNAddStates(20, 22);
                  break;
               case 7:
                  if (curChar == 10 && kind > 7)
                     kind = 7;
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(23, 26);
                  break;
               case 9:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddStates(27, 29);
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(10, 7);
                  break;
               case 11:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddStates(30, 34);
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 90)
                     kind = 90;
                  jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 14:
                  if (curChar == 46)
                     jjCheckNAdd(15);
                  break;
               case 15:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 94)
                     kind = 94;
                  jjCheckNAddStates(35, 37);
                  break;
               case 17:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(18);
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 94)
                     kind = 94;
                  jjCheckNAddTwoStates(18, 19);
                  break;
               case 20:
                  if (curChar == 39)
                     jjAddStates(9, 10);
                  break;
               case 21:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAdd(22);
                  break;
               case 22:
                  if (curChar == 39 && kind > 96)
                     kind = 96;
                  break;
               case 24:
                  if ((0x8000008400000000L & l) != 0L)
                     jjCheckNAdd(22);
                  break;
               case 25:
                  if (curChar == 48)
                     jjCheckNAddTwoStates(26, 22);
                  break;
               case 26:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(26, 22);
                  break;
               case 27:
                  if ((0x3fe000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(28, 22);
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(28, 22);
                  break;
               case 29:
                  if (curChar == 48)
                     jjAddStates(38, 39);
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(31, 22);
                  break;
               case 33:
                  if (curChar == 34)
                     jjCheckNAddStates(6, 8);
                  break;
               case 34:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(6, 8);
                  break;
               case 36:
                  if ((0x8000008400000000L & l) != 0L)
                     jjCheckNAddStates(6, 8);
                  break;
               case 37:
                  if (curChar == 34 && kind > 97)
                     kind = 97;
                  break;
               case 38:
                  if (curChar == 48)
                     jjCheckNAddStates(40, 43);
                  break;
               case 39:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(40, 43);
                  break;
               case 40:
                  if ((0x3fe000000000000L & l) != 0L)
                     jjCheckNAddStates(44, 47);
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(44, 47);
                  break;
               case 42:
                  if (curChar == 48)
                     jjAddStates(48, 49);
                  break;
               case 44:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(50, 53);
                  break;
               case 46:
                  if (curChar == 48)
                     jjAddStates(14, 15);
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 93)
                     kind = 93;
                  jjAddStates(54, 55);
                  break;
               case 51:
                  if (curChar != 48)
                     break;
                  if (kind > 92)
                     kind = 92;
                  jjCheckNAdd(52);
                  break;
               case 52:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 91)
                     kind = 91;
                  jjCheckNAddTwoStates(52, 53);
                  break;
               case 54:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 92)
                     kind = 92;
                  jjCheckNAddStates(11, 13);
                  break;
               case 55:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 92)
                     kind = 92;
                  jjCheckNAddTwoStates(55, 56);
                  break;
               case 57:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  jjCheckNAdd(57);
                  break;
               case 58:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 5);
                  break;
               case 59:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(59, 60);
                  break;
               case 60:
                  if (curChar != 46)
                     break;
                  if (kind > 94)
                     kind = 94;
                  jjCheckNAddStates(56, 58);
                  break;
               case 61:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 94)
                     kind = 94;
                  jjCheckNAddStates(56, 58);
                  break;
               case 62:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(62, 14);
                  break;
               case 63:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(63, 64);
                  break;
               case 65:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(66);
                  break;
               case 66:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  jjCheckNAddTwoStates(66, 67);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 13:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 90)
                     kind = 90;
                  jjCheckNAdd(13);
                  break;
               case 5:
                  jjAddStates(59, 60);
                  break;
               case 16:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(61, 62);
                  break;
               case 19:
                  if ((0x104000001040L & l) != 0L && kind > 94)
                     kind = 94;
                  break;
               case 21:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(22);
                  break;
               case 23:
                  if (curChar == 92)
                     jjAddStates(63, 66);
                  break;
               case 24:
                  if ((0x54404610000000L & l) != 0L)
                     jjCheckNAdd(22);
                  break;
               case 30:
                  if (curChar == 120)
                     jjCheckNAdd(31);
                  break;
               case 31:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddTwoStates(31, 22);
                  break;
               case 32:
                  if (curChar == 88)
                     jjCheckNAdd(31);
                  break;
               case 34:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(6, 8);
                  break;
               case 35:
                  if (curChar == 92)
                     jjAddStates(67, 70);
                  break;
               case 36:
                  if ((0x54404610000000L & l) != 0L)
                     jjCheckNAddStates(6, 8);
                  break;
               case 43:
                  if (curChar == 120)
                     jjCheckNAdd(44);
                  break;
               case 44:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(50, 53);
                  break;
               case 45:
                  if (curChar == 88)
                     jjCheckNAdd(44);
                  break;
               case 47:
                  if (curChar == 120)
                     jjCheckNAdd(48);
                  break;
               case 48:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 93)
                     kind = 93;
                  jjCheckNAddTwoStates(48, 49);
                  break;
               case 49:
                  if ((0x20100000201000L & l) != 0L && kind > 93)
                     kind = 93;
                  break;
               case 50:
                  if (curChar == 88)
                     jjCheckNAdd(48);
                  break;
               case 53:
                  if ((0x20100000201000L & l) != 0L && kind > 91)
                     kind = 91;
                  break;
               case 56:
                  if ((0x20100000201000L & l) != 0L && kind > 92)
                     kind = 92;
                  break;
               case 64:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(71, 72);
                  break;
               case 67:
                  if ((0x104000001040L & l) != 0L && kind > 95)
                     kind = 95;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 5:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(59, 60);
                  break;
               case 21:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 34:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(6, 8);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 68 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 10:
         return jjStopAtPos(0, 8);
      default :
         return 1;
   }
}
private final int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_2(0x400L);
      default :
         return 1;
   }
}
private final int jjMoveStringLiteralDfa1_2(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(1, 10);
         break;
      default :
         return 2;
   }
   return 2;
}
static final int[] jjnextStates = {
   59, 60, 62, 14, 63, 64, 34, 35, 37, 21, 23, 55, 56, 57, 47, 50, 
   2, 3, 4, 7, 7, 8, 11, 9, 10, 7, 8, 9, 10, 7, 9, 10, 
   7, 8, 11, 15, 16, 19, 30, 32, 34, 35, 39, 37, 34, 35, 41, 37, 
   43, 45, 34, 35, 44, 37, 48, 49, 61, 16, 19, 5, 6, 17, 18, 24, 
   25, 27, 29, 36, 38, 40, 42, 65, 66, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default : 
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, 
"\43\160\162\141\147\155\141", "\111\104", "\160\162\145\146\151\170", "\73", "\155\157\144\165\154\145", 
"\173", "\175", "\141\142\163\164\162\141\143\164", 
"\151\156\164\145\162\146\141\143\145", "\72", "\54", "\72\72", "\166\141\154\165\145\164\171\160\145", 
"\143\165\163\164\157\155", "\164\162\165\156\143\141\164\141\142\154\145", 
"\163\165\160\160\157\162\164\163", "\160\165\142\154\151\143", "\160\162\151\166\141\164\145", 
"\146\141\143\164\157\162\171", "\50", "\51", "\151\156", "\143\157\156\163\164", "\75", "\174", "\136", 
"\46", "\76\76", "\74\74", "\53", "\55", "\52", "\57", "\45", "\176", 
"\124\122\125\105", "\106\101\114\123\105", "\164\171\160\145\144\145\146", 
"\156\141\164\151\166\145", "\146\154\157\141\164", "\144\157\165\142\154\145", "\154\157\156\147", 
"\163\150\157\162\164", "\165\156\163\151\147\156\145\144", "\143\150\141\162", 
"\167\143\150\141\162", "\142\157\157\154\145\141\156", "\157\143\164\145\164", "\141\156\171", 
"\117\142\152\145\143\164", "\163\164\162\165\143\164", "\165\156\151\157\156", 
"\163\167\151\164\143\150", "\143\141\163\145", "\144\145\146\141\165\154\164", "\145\156\165\155", 
"\163\145\161\165\145\156\143\145", "\74", "\76", "\163\164\162\151\156\147", "\167\163\164\162\151\156\147", 
"\133", "\135", "\162\145\141\144\157\156\154\171", 
"\141\164\164\162\151\142\165\164\145", "\145\170\143\145\160\164\151\157\156", "\157\156\145\167\141\171", 
"\166\157\151\144", "\157\165\164", "\151\156\157\165\164", "\162\141\151\163\145\163", 
"\143\157\156\164\145\170\164", "\146\151\170\145\144", "\126\141\154\165\145\102\141\163\145", "\114", "\56", 
"\144", "\104", null, null, null, null, null, null, null, null, null, };
public static final String[] lexStateNames = {
   "DEFAULT", 
   "IN_LINE_COMMENT", 
   "IN_COMMENT", 
};
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, 1, 2, -1, 0, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xfffffffffffff001L, 0x7ffffffffL, 
};
static final long[] jjtoSkip = {
   0x5feL, 0x0L, 
};
static final long[] jjtoMore = {
   0xa00L, 0x0L, 
};
protected JavaCharStream input_stream;
private final int[] jjrounds = new int[68];
private final int[] jjstateSet = new int[136];
protected char curChar;
public IDLParserTokenManager(JavaCharStream stream)
{
   if (JavaCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public IDLParserTokenManager(JavaCharStream stream, int lexState)
{
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(JavaCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 68; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(JavaCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 3 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 9)
         {
            jjmatchedKind = 9;
         }
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 11)
         {
            jjmatchedKind = 11;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

}
