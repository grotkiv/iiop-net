module Ch {
module Elca {
module Iiop {
module IntegrationTests {


    enum TestEnumForU {
        A, B, C
    };


    union TestUnion switch(long) {
        case 0: short val0;
        case 1:
        case 2: long val1;
        default: boolean val2;
    };

    union TestUnionULong switch(unsigned long) {
        case 0: short val0;
        case 0x80000000: long val1;
        default: boolean val2;
    };


    union TestUnionE switch(TestEnumForU) {
        case A: short valE0;
        case B: 
        case C: TestEnumForU valE1;
    };

    
    // testing different constants and Constant-expressions
    const long MyConstant = 11;

    const char NonEscapeCharConst = 'a';
    const wchar UnicodeEscapeCharConst1 = L'\u62';
    const wchar UnicodeEscapeCharConst2 = L'\uFFFF';
    const char HexEscapeCharConst = '\0x62';
    const char DecEscapeCharConst1 = '\97';
    const char DecEscapeCharConst2 = '\0';
    

    // IDLToCLSCompiler regression test:
    // IDLToCLSCompiler's handling of char constants
    // fixing bug 841774
    typedef char LoginSessionMode;

    const LoginSessionMode STAND_ALONE_TEST = '1';
    const LoginSessionMode NETWORK_TEST = '2';
    const LoginSessionMode PRODUCTION = '3';

    

    // IDLToCLSCompiler regression test:
    // constant values not usable in other IDL definitions 
    // fxing bug 840585
    const long AVAL = 1;

    const long BVAL = AVAL;

    // IDLToCLSCompiler regression test:
    // problem with wstring constant values
    const wstring COMP_NAME_A = L"test";
    const wstring COMP_NAME_B = L"java:comp/env/ejb/Fibo";


	// IDLToCLSCompiler regressino test:
	// check that "big" unions are compiled without crashing
	// fixes bug 831611

	enum UnionType2 {
		TYPE_1,
		TYPE_2,
		TYPE_3,
		TYPE_4,
		TYPE_5,
		TYPE_6,
		TYPE_7,
		TYPE_8
	};

	union TestUnion2 switch(UnionType2) {
		case TYPE_1:	wstring Field;
		case TYPE_2:	wstring Field;
		case TYPE_3:	wstring Field;
		case TYPE_4:	wstring Field;
		case TYPE_5:	wstring Field;
		case TYPE_6:	wstring Field;
		case TYPE_7:	wstring Field;
		case TYPE_8:	wstring Field;
		default: wstring Field;
	};
	
	
	// test for int / float constant values
	const long long Max_int = 9223372036854775807;
	const long long Min_int = -9223372036854775808;
	const long Zero_val = 0;
	
	const long Zero_from_hex = 0x0;
	const long One_from_hex = 0x1;
	const long Minus_one_from_hex = -0x1;
	
	const float Zero_val_float = 0.0f;
	const float Minus_one_float = -1.0f;
	const float Plus_one_float = 1.0f;
	
	const float Plus_Inf = Infinity;
	const float Minus_Inf = -Infinity;
	

	const unsigned short UShort_BiggerThanShort =                        0x8000;
	const unsigned long ULong_BiggerThanLong =                       0x80000000;
	const unsigned long long ULongLong_BiggerThanLongLong =  0x8000000000000000;
	
	
	
};
};
};
};
