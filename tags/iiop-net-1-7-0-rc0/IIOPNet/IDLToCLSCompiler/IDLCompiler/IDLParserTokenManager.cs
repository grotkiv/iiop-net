/* Generated By:JJTree&JavaCC: Do not edit this line. IDLParserTokenManager.cs */
using System;
using System.Diagnostics;


public class IDLParserTokenManager
{
private int jjStopStringLiteralDfa_0(int pos, ulong active0, ulong active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x8000000000000L) != (ulong)0L || (active1 & 0x1800002L) != (ulong)0L)
            return 13;
         if ((active1 & 0x400000L) != (ulong)0L)
            return 15;
         if ((active1 & 0x2000000L) != (ulong)0L)
            return 101;
         if ((active0 & 0xfff7c0039fc72000L) != (ulong)0L || (active1 & 0x3ffccdL) != (ulong)0L)
         {
            jjmatchedKind = 92;
            return 13;
         }
         return -1;
      case 1:
         if ((active0 & 0xffffc0031fc62000L) != (ulong)0L || (active1 & 0x3efccfL) != (ulong)0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 92;
               jjmatchedPos = 1;
            }
            return 13;
         }
         if ((active0 & 0x80010000L) != (ulong)0L || (active1 & 0x10000L) != (ulong)0L)
            return 13;
         return -1;
      case 2:
         if ((active0 & 0x800000200000000L) != (ulong)0L || (active1 & 0x8000L) != (ulong)0L)
            return 13;
         if ((active0 & 0xf7ffc0011fc72000L) != (ulong)0L || (active1 & 0x3f7ccfL) != (ulong)0L)
         {
            jjmatchedKind = 92;
            jjmatchedPos = 2;
            return 13;
         }
         return -1;
      case 3:
         if ((active0 & 0x90400000000000L) != (ulong)0L || (active1 & 0x4005L) != (ulong)0L)
            return 13;
         if ((active0 & 0xf76f80011fc72000L) != (ulong)0L || (active1 & 0x3f3ccaL) != (ulong)0L)
         {
            jjmatchedKind = 92;
            jjmatchedPos = 3;
            return 13;
         }
         return -1;
      case 4:
         if ((active0 & 0xb24b00001fc32000L) != (ulong)0L || (active1 & 0x363ccaL) != (ulong)0L)
         {
            jjmatchedKind = 92;
            jjmatchedPos = 4;
            return 13;
         }
         if ((active0 & 0x4524800100040000L) != (ulong)0L || (active1 & 0x90000L) != (ulong)0L)
            return 13;
         return -1;
      case 5:
         if ((active0 & 0x24100001b430000L) != (ulong)0L || (active1 & 0x341c8aL) != (ulong)0L)
         {
            jjmatchedKind = 92;
            jjmatchedPos = 5;
            return 13;
         }
         if ((active0 & 0xb00a000004802000L) != (ulong)0L || (active1 & 0x22040L) != (ulong)0L)
            return 13;
         return -1;
      case 6:
         if ((active0 & 0x201000018000000L) != (ulong)0L || (active1 & 0x40082L) != (ulong)0L)
            return 13;
         if ((active0 & 0x40000003430000L) != (ulong)0L || (active1 & 0x301c08L) != (ulong)0L)
         {
            jjmatchedKind = 92;
            jjmatchedPos = 6;
            return 13;
         }
         return -1;
      case 7:
         if ((active0 & 0x1410000L) != (ulong)0L || (active1 & 0x101800L) != (ulong)0L)
         {
            jjmatchedKind = 92;
            jjmatchedPos = 7;
            return 13;
         }
         if ((active0 & 0x40000002020000L) != (ulong)0L || (active1 & 0x200408L) != (ulong)0L)
            return 13;
         return -1;
      case 8:
         if ((active0 & 0x1000000L) != (ulong)0L)
         {
            jjmatchedKind = 92;
            jjmatchedPos = 8;
            return 13;
         }
         if ((active0 & 0x410000L) != (ulong)0L || (active1 & 0x101800L) != (ulong)0L)
            return 13;
         return -1;
      case 9:
         if ((active0 & 0x1000000L) != (ulong)0L)
         {
            jjmatchedKind = 92;
            jjmatchedPos = 9;
            return 13;
         }
         return -1;
      default :
         return -1;
   }
}
private int jjStartNfa_0(int pos, ulong active0, ulong active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, (ulong)active0, (ulong)active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(System.IO.IOException) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case ((char) 35):
         return jjMoveStringLiteralDfa1_0((ulong)0x0L, (ulong)0x2000000L);
      case ((char) 37):
         return jjStopAtPos(0, 44);
      case ((char) 38):
         return jjStopAtPos(0, 37);
      case ((char) 40):
         return jjStopAtPos(0, 29);
      case ((char) 41):
         return jjStopAtPos(0, 30);
      case ((char) 42):
         return jjStopAtPos(0, 42);
      case ((char) 43):
         return jjStopAtPos(0, 40);
      case ((char) 44):
         return jjStopAtPos(0, 20);
      case ((char) 45):
         return jjStopAtPos(0, 41);
      case ((char) 46):
         return jjStartNfaWithStates_0(0, 86, 15);
      case ((char) 47):
         jjmatchedKind = 43;
         return jjMoveStringLiteralDfa1_0((ulong)0x60L, (ulong)0x0L);
      case ((char) 58):
         jjmatchedKind = 19;
         return jjMoveStringLiteralDfa1_0((ulong)0x200000L, (ulong)0x0L);
      case ((char) 59):
         return jjStopAtPos(0, 12);
      case ((char) 60):
         jjmatchedKind = 68;
         return jjMoveStringLiteralDfa1_0((ulong)0x8000000000L, (ulong)0x0L);
      case ((char) 61):
         return jjStopAtPos(0, 34);
      case ((char) 62):
         jjmatchedKind = 69;
         return jjMoveStringLiteralDfa1_0((ulong)0x4000000000L, (ulong)0x0L);
      case ((char) 68):
         return jjStartNfaWithStates_0(0, 88, 13);
      case ((char) 70):
         return jjMoveStringLiteralDfa1_0((ulong)0x800000000000L, (ulong)0x0L);
      case ((char) 73):
         return jjMoveStringLiteralDfa1_0((ulong)0x0L, (ulong)0x200000L);
      case ((char) 78):
         return jjMoveStringLiteralDfa1_0((ulong)0x200000000L, (ulong)0x0L);
      case ((char) 79):
         return jjMoveStringLiteralDfa1_0((ulong)0x1000000000000000L, (ulong)0x0L);
      case ((char) 84):
         return jjMoveStringLiteralDfa1_0((ulong)0x400000000000L, (ulong)0x0L);
      case ((char) 86):
         return jjMoveStringLiteralDfa1_0((ulong)0x0L, (ulong)0x100000L);
      case ((char) 91):
         return jjStopAtPos(0, 72);
      case ((char) 93):
         return jjStopAtPos(0, 73);
      case ((char) 94):
         return jjStopAtPos(0, 36);
      case ((char) 97):
         return jjMoveStringLiteralDfa1_0((ulong)0x800000000020000L, (ulong)0x800L);
      case ((char) 98):
         return jjMoveStringLiteralDfa1_0((ulong)0x200000000000000L, (ulong)0x0L);
      case ((char) 99):
         return jjMoveStringLiteralDfa1_0((ulong)0x80000100800000L, (ulong)0x40001L);
      case ((char) 100):
         jjmatchedKind = 87;
         return jjMoveStringLiteralDfa1_0((ulong)0x8000000000000L, (ulong)0x2L);
      case ((char) 101):
         return jjMoveStringLiteralDfa1_0((ulong)0x0L, (ulong)0x1004L);
      case ((char) 102):
         return jjMoveStringLiteralDfa1_0((ulong)0x4000010000000L, (ulong)0x80000L);
      case ((char) 105):
         return jjMoveStringLiteralDfa1_0((ulong)0x80010000L, (ulong)0x10000L);
      case ((char) 108):
         return jjMoveStringLiteralDfa1_0((ulong)0x10000000040000L, (ulong)0x0L);
      case ((char) 109):
         return jjMoveStringLiteralDfa1_0((ulong)0x2000L, (ulong)0x0L);
      case ((char) 110):
         return jjMoveStringLiteralDfa1_0((ulong)0x2000000000000L, (ulong)0x0L);
      case ((char) 111):
         return jjMoveStringLiteralDfa1_0((ulong)0x400000000000000L, (ulong)0xa000L);
      case ((char) 112):
         return jjMoveStringLiteralDfa1_0((ulong)0xc000000L, (ulong)0x0L);
      case ((char) 114):
         return jjMoveStringLiteralDfa1_0((ulong)0x0L, (ulong)0x20400L);
      case ((char) 115):
         return jjMoveStringLiteralDfa1_0((ulong)0xa020000002000000L, (ulong)0x48L);
      case ((char) 116):
         return jjMoveStringLiteralDfa1_0((ulong)0x1000001000000L, (ulong)0x0L);
      case ((char) 117):
         return jjMoveStringLiteralDfa1_0((ulong)0x4040000000000000L, (ulong)0x0L);
      case ((char) 118):
         return jjMoveStringLiteralDfa1_0((ulong)0x400000L, (ulong)0x4000L);
      case ((char) 119):
         return jjMoveStringLiteralDfa1_0((ulong)0x100000000000000L, (ulong)0x80L);
      case ((char) 123):
         return jjStopAtPos(0, 14);
      case ((char) 124):
         return jjStopAtPos(0, 35);
      case ((char) 125):
         return jjStopAtPos(0, 15);
      case ((char) 126):
         return jjStopAtPos(0, 45);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(ulong active0, ulong active1)
{
   try { curChar = input_stream.readChar(); }
   catch(System.IO.IOException) {
      jjStopStringLiteralDfa_0(0, (ulong)active0, (ulong)active1);
      return 1;
   }
   switch(curChar)
   {
      case ((char) 42):
         if ((active0 & 0x40L) != (ulong)0L)
            return jjStopAtPos(1, 6);
         break;
      case ((char) 47):
         if ((active0 & 0x20L) != (ulong)0L)
            return jjStopAtPos(1, 5);
         break;
      case ((char) 58):
         if ((active0 & 0x200000L) != (ulong)0L)
            return jjStopAtPos(1, 21);
         break;
      case ((char) 60):
         if ((active0 & 0x8000000000L) != (ulong)0L)
            return jjStopAtPos(1, 39);
         break;
      case ((char) 62):
         if ((active0 & 0x4000000000L) != (ulong)0L)
            return jjStopAtPos(1, 38);
         break;
      case ((char) 65):
         return jjMoveStringLiteralDfa2_0(active0, (ulong)0x800000000000L, active1, (ulong)0L);
      case ((char) 82):
         return jjMoveStringLiteralDfa2_0(active0, (ulong)0x400000000000L, active1, (ulong)0L);
      case ((char) 97):
         return jjMoveStringLiteralDfa2_0(active0, (ulong)0x2000210400000L, active1, (ulong)0x120001L);
      case ((char) 98):
         return jjMoveStringLiteralDfa2_0(active0, (ulong)0x1000000000020000L, active1, (ulong)0L);
      case ((char) 99):
         return jjMoveStringLiteralDfa2_0(active0, (ulong)0x500000000000000L, active1, (ulong)0L);
      case ((char) 101):
         return jjMoveStringLiteralDfa2_0(active0, (ulong)0L, active1, (ulong)0x40aL);
      case ((char) 104):
         return jjMoveStringLiteralDfa2_0(active0, (ulong)0xa0000000000000L, active1, (ulong)0L);
      case ((char) 105):
         return jjMoveStringLiteralDfa2_0(active0, (ulong)0L, active1, (ulong)0x80000L);
      case ((char) 108):
         return jjMoveStringLiteralDfa2_0(active0, (ulong)0x4000000000000L, active1, (ulong)0L);
      case ((char) 110):
         if ((active0 & 0x80000000L) != (ulong)0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, (ulong)0x4840000000010000L, active1, (ulong)0x212004L);
      case ((char) 111):
         return jjMoveStringLiteralDfa2_0(active0, (ulong)0x218000100042000L, active1, (ulong)0x44000L);
      case ((char) 112):
         return jjMoveStringLiteralDfa2_0(active0, (ulong)0L, active1, (ulong)0x2000000L);
      case ((char) 114):
         return jjMoveStringLiteralDfa2_0(active0, (ulong)0x9000000L, active1, (ulong)0L);
      case ((char) 115):
         return jjMoveStringLiteralDfa2_0(active0, (ulong)0L, active1, (ulong)0x80L);
      case ((char) 116):
         return jjMoveStringLiteralDfa2_0(active0, (ulong)0x2000000000000000L, active1, (ulong)0x840L);
      case ((char) 117):
         return jjMoveStringLiteralDfa2_0(active0, (ulong)0x6800000L, active1, (ulong)0x8000L);
      case ((char) 119):
         return jjMoveStringLiteralDfa2_0(active0, (ulong)0x8000000000000000L, active1, (ulong)0L);
      case ((char) 120):
         return jjMoveStringLiteralDfa2_0(active0, (ulong)0L, active1, (ulong)0x1000L);
      case ((char) 121):
         return jjMoveStringLiteralDfa2_0(active0, (ulong)0x1000000000000L, active1, (ulong)0L);
      default :
         break;
   }
   return jjStartNfa_0(0, (ulong)active0, (ulong)active1);
}
private int jjMoveStringLiteralDfa2_0(ulong old0, ulong active0, ulong old1, ulong active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == (ulong)0L)
      return jjStartNfa_0(0, (ulong)old0, (ulong)old1); 
   try { curChar = input_stream.readChar(); }
   catch(System.IO.IOException) {
      jjStopStringLiteralDfa_0(1, (ulong)active0, (ulong)active1);
      return 2;
   }
   switch(curChar)
   {
      case ((char) 76):
         return jjMoveStringLiteralDfa3_0(active0, (ulong)0x800000000000L, active1, (ulong)0L);
      case ((char) 78):
         if ((active0 & 0x200000000L) != (ulong)0L)
            return jjStartNfaWithStates_0(2, 33, 13);
         break;
      case ((char) 85):
         return jjMoveStringLiteralDfa3_0(active0, (ulong)0x400000000000L, active1, (ulong)0L);
      case ((char) 97):
         return jjMoveStringLiteralDfa3_0(active0, (ulong)0x80000000000000L, active1, (ulong)0x400L);
      case ((char) 98):
         return jjMoveStringLiteralDfa3_0(active0, (ulong)0x4000000L, active1, (ulong)0L);
      case ((char) 99):
         return jjMoveStringLiteralDfa3_0(active0, (ulong)0x10040000L, active1, (ulong)0x1000L);
      case ((char) 100):
         return jjMoveStringLiteralDfa3_0(active0, (ulong)0x2000L, active1, (ulong)0L);
      case ((char) 101):
         return jjMoveStringLiteralDfa3_0(active0, (ulong)0L, active1, (ulong)0x2000L);
      case ((char) 102):
         return jjMoveStringLiteralDfa3_0(active0, (ulong)0L, active1, (ulong)0x200002L);
      case ((char) 104):
         return jjMoveStringLiteralDfa3_0(active0, (ulong)0x100000000000000L, active1, (ulong)0L);
      case ((char) 105):
         return jjMoveStringLiteralDfa3_0(active0, (ulong)0xc000000008000000L, active1, (ulong)0x24000L);
      case ((char) 106):
         return jjMoveStringLiteralDfa3_0(active0, (ulong)0x1000000000000000L, active1, (ulong)0L);
      case ((char) 108):
         return jjMoveStringLiteralDfa3_0(active0, (ulong)0x400000L, active1, (ulong)0x100000L);
      case ((char) 110):
         return jjMoveStringLiteralDfa3_0(active0, (ulong)0x10000100000000L, active1, (ulong)0x40000L);
      case ((char) 111):
         return jjMoveStringLiteralDfa3_0(active0, (ulong)0x224000000000000L, active1, (ulong)0x10000L);
      case ((char) 112):
         return jjMoveStringLiteralDfa3_0(active0, (ulong)0x1000002000000L, active1, (ulong)0L);
      case ((char) 113):
         return jjMoveStringLiteralDfa3_0(active0, (ulong)0L, active1, (ulong)0x8L);
      case ((char) 114):
         return jjMoveStringLiteralDfa3_0(active0, (ulong)0x2000000000000000L, active1, (ulong)0x2000040L);
      case ((char) 115):
         return jjMoveStringLiteralDfa3_0(active0, (ulong)0x40000000820000L, active1, (ulong)0x1L);
      case ((char) 116):
         if ((active1 & 0x8000L) != (ulong)0L)
            return jjStartNfaWithStates_0(2, 79, 13);
         return jjMoveStringLiteralDfa3_0(active0, (ulong)0x402000000010000L, active1, (ulong)0x880L);
      case ((char) 117):
         return jjMoveStringLiteralDfa3_0(active0, (ulong)0x8000001000000L, active1, (ulong)0x4L);
      case ((char) 120):
         return jjMoveStringLiteralDfa3_0(active0, (ulong)0L, active1, (ulong)0x80000L);
      case ((char) 121):
         if ((active0 & 0x800000000000000L) != (ulong)0L)
            return jjStartNfaWithStates_0(2, 59, 13);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, (ulong)active0, (ulong)active1);
}
private int jjMoveStringLiteralDfa3_0(ulong old0, ulong active0, ulong old1, ulong active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == (ulong)0L)
      return jjStartNfa_0(1, (ulong)old0, (ulong)old1); 
   try { curChar = input_stream.readChar(); }
   catch(System.IO.IOException) {
      jjStopStringLiteralDfa_0(2, (ulong)active0, (ulong)active1);
      return 3;
   }
   switch(curChar)
   {
      case ((char) 69):
         if ((active0 & 0x400000000000L) != (ulong)0L)
            return jjStartNfaWithStates_0(3, 46, 13);
         break;
      case ((char) 83):
         return jjMoveStringLiteralDfa4_0(active0, (ulong)0x800000000000L, active1, (ulong)0L);
      case ((char) 97):
         return jjMoveStringLiteralDfa4_0(active0, (ulong)0x104000000040000L, active1, (ulong)0x2000002L);
      case ((char) 98):
         return jjMoveStringLiteralDfa4_0(active0, (ulong)0x8000000000000L, active1, (ulong)0L);
      case ((char) 100):
         if ((active1 & 0x4000L) != (ulong)0L)
            return jjStartNfaWithStates_0(3, 78, 13);
         return jjMoveStringLiteralDfa4_0(active0, (ulong)0L, active1, (ulong)0x400L);
      case ((char) 101):
         if ((active1 & 0x1L) != (ulong)0L)
            return jjStartNfaWithStates_0(3, 64, 13);
         return jjMoveStringLiteralDfa4_0(active0, (ulong)0x1401000000010000L, active1, (ulong)0x81000L);
      case ((char) 103):
         if ((active0 & 0x10000000000000L) != (ulong)0L)
            return jjStartNfaWithStates_0(3, 52, 13);
         break;
      case ((char) 105):
         return jjMoveStringLiteralDfa4_0(active0, (ulong)0x42000000000000L, active1, (ulong)0x200040L);
      case ((char) 108):
         return jjMoveStringLiteralDfa4_0(active0, (ulong)0x200000004000000L, active1, (ulong)0L);
      case ((char) 109):
         if ((active1 & 0x4L) != (ulong)0L)
            return jjStartNfaWithStates_0(3, 66, 13);
         break;
      case ((char) 110):
         return jjMoveStringLiteralDfa4_0(active0, (ulong)0x1000000L, active1, (ulong)0L);
      case ((char) 111):
         return jjMoveStringLiteralDfa4_0(active0, (ulong)0x4000000000000000L, active1, (ulong)0L);
      case ((char) 112):
         return jjMoveStringLiteralDfa4_0(active0, (ulong)0x2000000L, active1, (ulong)0L);
      case ((char) 114):
         if ((active0 & 0x80000000000000L) != (ulong)0L)
            return jjStartNfaWithStates_0(3, 55, 13);
         return jjMoveStringLiteralDfa4_0(active0, (ulong)0x20000000000000L, active1, (ulong)0x880L);
      case ((char) 115):
         return jjMoveStringLiteralDfa4_0(active0, (ulong)0x100000000L, active1, (ulong)0x20000L);
      case ((char) 116):
         return jjMoveStringLiteralDfa4_0(active0, (ulong)0x8000000010820000L, active1, (ulong)0x40000L);
      case ((char) 117):
         return jjMoveStringLiteralDfa4_0(active0, (ulong)0x2000000000402000L, active1, (ulong)0x110008L);
      case ((char) 118):
         return jjMoveStringLiteralDfa4_0(active0, (ulong)0x8000000L, active1, (ulong)0L);
      case ((char) 119):
         return jjMoveStringLiteralDfa4_0(active0, (ulong)0L, active1, (ulong)0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(2, (ulong)active0, (ulong)active1);
}
private int jjMoveStringLiteralDfa4_0(ulong old0, ulong active0, ulong old1, ulong active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == (ulong)0L)
      return jjStartNfa_0(2, (ulong)old0, (ulong)old1); 
   try { curChar = input_stream.readChar(); }
   catch(System.IO.IOException) {
      jjStopStringLiteralDfa_0(3, (ulong)active0, (ulong)active1);
      return 4;
   }
   switch(curChar)
   {
      case ((char) 69):
         if ((active0 & 0x800000000000L) != (ulong)0L)
            return jjStartNfaWithStates_0(4, 47, 13);
         break;
      case ((char) 97):
         return jjMoveStringLiteralDfa5_0(active0, (ulong)0x8000000L, active1, (ulong)0x2000L);
      case ((char) 99):
         return jjMoveStringLiteralDfa5_0(active0, (ulong)0xb000000001000000L, active1, (ulong)0L);
      case ((char) 100):
         if ((active1 & 0x80000L) != (ulong)0L)
            return jjStartNfaWithStates_0(4, 83, 13);
         return jjMoveStringLiteralDfa5_0(active0, (ulong)0x1000000000000L, active1, (ulong)0L);
      case ((char) 101):
         return jjMoveStringLiteralDfa5_0(active0, (ulong)0x200000000400000L, active1, (ulong)0x160008L);
      case ((char) 103):
         return jjMoveStringLiteralDfa5_0(active0, (ulong)0x40000000000000L, active1, (ulong)0x2000000L);
      case ((char) 105):
         return jjMoveStringLiteralDfa5_0(active0, (ulong)0x4000000L, active1, (ulong)0x880L);
      case ((char) 108):
         if ((active0 & 0x40000L) != (ulong)0L)
            return jjStartNfaWithStates_0(4, 18, 13);
         return jjMoveStringLiteralDfa5_0(active0, (ulong)0x8000000002000L, active1, (ulong)0L);
      case ((char) 110):
         if ((active0 & 0x4000000000000000L) != (ulong)0L)
            return jjStartNfaWithStates_0(4, 62, 13);
         return jjMoveStringLiteralDfa5_0(active0, (ulong)0L, active1, (ulong)0x200040L);
      case ((char) 111):
         return jjMoveStringLiteralDfa5_0(active0, (ulong)0x12800000L, active1, (ulong)0x400L);
      case ((char) 112):
         return jjMoveStringLiteralDfa5_0(active0, (ulong)0L, active1, (ulong)0x1000L);
      case ((char) 114):
         if ((active0 & 0x100000000000000L) != (ulong)0L)
            return jjStartNfaWithStates_0(4, 56, 13);
         return jjMoveStringLiteralDfa5_0(active0, (ulong)0x30000L, active1, (ulong)0L);
      case ((char) 116):
         if ((active0 & 0x100000000L) != (ulong)0L)
            return jjStartNfaWithStates_0(4, 32, 13);
         else if ((active0 & 0x4000000000000L) != (ulong)0L)
            return jjStartNfaWithStates_0(4, 50, 13);
         else if ((active0 & 0x20000000000000L) != (ulong)0L)
            return jjStartNfaWithStates_0(4, 53, 13);
         else if ((active0 & 0x400000000000000L) != (ulong)0L)
            return jjStartNfaWithStates_0(4, 58, 13);
         else if ((active1 & 0x10000L) != (ulong)0L)
            return jjStartNfaWithStates_0(4, 80, 13);
         break;
      case ((char) 117):
         return jjMoveStringLiteralDfa5_0(active0, (ulong)0L, active1, (ulong)0x2L);
      case ((char) 118):
         return jjMoveStringLiteralDfa5_0(active0, (ulong)0x2000000000000L, active1, (ulong)0L);
      default :
         break;
   }
   return jjStartNfa_0(3, (ulong)active0, (ulong)active1);
}
private int jjMoveStringLiteralDfa5_0(ulong old0, ulong active0, ulong old1, ulong active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == (ulong)0L)
      return jjStartNfa_0(3, (ulong)old0, (ulong)old1); 
   try { curChar = input_stream.readChar(); }
   catch(System.IO.IOException) {
      jjStopStringLiteralDfa_0(4, (ulong)active0, (ulong)active1);
      return 5;
   }
   switch(curChar)
   {
      case ((char) 66):
         return jjMoveStringLiteralDfa6_0(active0, (ulong)0L, active1, (ulong)0x100000L);
      case ((char) 97):
         return jjMoveStringLiteralDfa6_0(active0, (ulong)0x200000001020000L, active1, (ulong)0L);
      case ((char) 98):
         return jjMoveStringLiteralDfa6_0(active0, (ulong)0L, active1, (ulong)0x800L);
      case ((char) 99):
         if ((active0 & 0x4000000L) != (ulong)0L)
            return jjStartNfaWithStates_0(5, 26, 13);
         break;
      case ((char) 101):
         if ((active0 & 0x2000L) != (ulong)0L)
            return jjStartNfaWithStates_0(5, 13, 13);
         else if ((active0 & 0x2000000000000L) != (ulong)0L)
            return jjStartNfaWithStates_0(5, 49, 13);
         else if ((active0 & 0x8000000000000L) != (ulong)0L)
            return jjStartNfaWithStates_0(5, 51, 13);
         return jjMoveStringLiteralDfa6_0(active0, (ulong)0x1000000000000L, active1, (ulong)0L);
      case ((char) 102):
         return jjMoveStringLiteralDfa6_0(active0, (ulong)0x10000L, active1, (ulong)0L);
      case ((char) 103):
         if ((active1 & 0x40L) != (ulong)0L)
            return jjStartNfaWithStates_0(5, 70, 13);
         break;
      case ((char) 104):
         if ((active0 & 0x8000000000000000L) != (ulong)0L)
            return jjStartNfaWithStates_0(5, 63, 13);
         break;
      case ((char) 105):
         return jjMoveStringLiteralDfa6_0(active0, (ulong)0L, active1, (ulong)0x200000L);
      case ((char) 108):
         return jjMoveStringLiteralDfa6_0(active0, (ulong)0L, active1, (ulong)0x2L);
      case ((char) 109):
         if ((active0 & 0x800000L) != (ulong)0L)
            return jjStartNfaWithStates_0(5, 23, 13);
         return jjMoveStringLiteralDfa6_0(active0, (ulong)0L, active1, (ulong)0x2000000L);
      case ((char) 110):
         return jjMoveStringLiteralDfa6_0(active0, (ulong)0x40000000000000L, active1, (ulong)0x488L);
      case ((char) 114):
         return jjMoveStringLiteralDfa6_0(active0, (ulong)0x12000000L, active1, (ulong)0L);
      case ((char) 115):
         if ((active1 & 0x20000L) != (ulong)0L)
            return jjStartNfaWithStates_0(5, 81, 13);
         break;
      case ((char) 116):
         if ((active0 & 0x1000000000000000L) != (ulong)0L)
            return jjStartNfaWithStates_0(5, 60, 13);
         else if ((active0 & 0x2000000000000000L) != (ulong)0L)
            return jjStartNfaWithStates_0(5, 61, 13);
         return jjMoveStringLiteralDfa6_0(active0, (ulong)0x8400000L, active1, (ulong)0x1000L);
      case ((char) 120):
         return jjMoveStringLiteralDfa6_0(active0, (ulong)0L, active1, (ulong)0x40000L);
      case ((char) 121):
         if ((active1 & 0x2000L) != (ulong)0L)
            return jjStartNfaWithStates_0(5, 77, 13);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, (ulong)active0, (ulong)active1);
}
private int jjMoveStringLiteralDfa6_0(ulong old0, ulong active0, ulong old1, ulong active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == (ulong)0L)
      return jjStartNfa_0(4, (ulong)old0, (ulong)old1); 
   try { curChar = input_stream.readChar(); }
   catch(System.IO.IOException) {
      jjStopStringLiteralDfa_0(5, (ulong)active0, (ulong)active1);
      return 6;
   }
   switch(curChar)
   {
      case ((char) 97):
         if ((active1 & 0x2000000L) != (ulong)0L)
            return jjStopAtPos(6, 89);
         return jjMoveStringLiteralDfa7_0(active0, (ulong)0x10000L, active1, (ulong)0x100000L);
      case ((char) 99):
         return jjMoveStringLiteralDfa7_0(active0, (ulong)0x20000L, active1, (ulong)0x8L);
      case ((char) 101):
         if ((active0 & 0x8000000L) != (ulong)0L)
            return jjStartNfaWithStates_0(6, 27, 13);
         return jjMoveStringLiteralDfa7_0(active0, (ulong)0x40000000000000L, active1, (ulong)0L);
      case ((char) 102):
         if ((active0 & 0x1000000000000L) != (ulong)0L)
            return jjStartNfaWithStates_0(6, 48, 13);
         break;
      case ((char) 103):
         if ((active1 & 0x80L) != (ulong)0L)
            return jjStartNfaWithStates_0(6, 71, 13);
         break;
      case ((char) 105):
         return jjMoveStringLiteralDfa7_0(active0, (ulong)0L, active1, (ulong)0x1000L);
      case ((char) 108):
         return jjMoveStringLiteralDfa7_0(active0, (ulong)0L, active1, (ulong)0x400L);
      case ((char) 110):
         if ((active0 & 0x200000000000000L) != (ulong)0L)
            return jjStartNfaWithStates_0(6, 57, 13);
         break;
      case ((char) 116):
         if ((active1 & 0x2L) != (ulong)0L)
            return jjStartNfaWithStates_0(6, 65, 13);
         else if ((active1 & 0x40000L) != (ulong)0L)
            return jjStartNfaWithStates_0(6, 82, 13);
         return jjMoveStringLiteralDfa7_0(active0, (ulong)0x3000000L, active1, (ulong)0x200000L);
      case ((char) 117):
         return jjMoveStringLiteralDfa7_0(active0, (ulong)0L, active1, (ulong)0x800L);
      case ((char) 121):
         if ((active0 & 0x10000000L) != (ulong)0L)
            return jjStartNfaWithStates_0(6, 28, 13);
         return jjMoveStringLiteralDfa7_0(active0, (ulong)0x400000L, active1, (ulong)0L);
      default :
         break;
   }
   return jjStartNfa_0(5, (ulong)active0, (ulong)active1);
}
private int jjMoveStringLiteralDfa7_0(ulong old0, ulong active0, ulong old1, ulong active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == (ulong)0L)
      return jjStartNfa_0(5, (ulong)old0, (ulong)old1); 
   try { curChar = input_stream.readChar(); }
   catch(System.IO.IOException) {
      jjStopStringLiteralDfa_0(6, (ulong)active0, (ulong)active1);
      return 7;
   }
   switch(curChar)
   {
      case ((char) 97):
         return jjMoveStringLiteralDfa8_0(active0, (ulong)0x1000000L, active1, (ulong)0L);
      case ((char) 99):
         return jjMoveStringLiteralDfa8_0(active0, (ulong)0x10000L, active1, (ulong)0L);
      case ((char) 100):
         if ((active0 & 0x40000000000000L) != (ulong)0L)
            return jjStartNfaWithStates_0(7, 54, 13);
         break;
      case ((char) 101):
         if ((active1 & 0x8L) != (ulong)0L)
            return jjStartNfaWithStates_0(7, 67, 13);
         break;
      case ((char) 111):
         return jjMoveStringLiteralDfa8_0(active0, (ulong)0L, active1, (ulong)0x1000L);
      case ((char) 112):
         return jjMoveStringLiteralDfa8_0(active0, (ulong)0x400000L, active1, (ulong)0L);
      case ((char) 115):
         if ((active0 & 0x2000000L) != (ulong)0L)
            return jjStartNfaWithStates_0(7, 25, 13);
         return jjMoveStringLiteralDfa8_0(active0, (ulong)0L, active1, (ulong)0x100000L);
      case ((char) 116):
         if ((active0 & 0x20000L) != (ulong)0L)
            return jjStartNfaWithStates_0(7, 17, 13);
         return jjMoveStringLiteralDfa8_0(active0, (ulong)0L, active1, (ulong)0x800L);
      case ((char) 121):
         if ((active1 & 0x400L) != (ulong)0L)
            return jjStartNfaWithStates_0(7, 74, 13);
         else if ((active1 & 0x200000L) != (ulong)0L)
            return jjStartNfaWithStates_0(7, 85, 13);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, (ulong)active0, (ulong)active1);
}
private int jjMoveStringLiteralDfa8_0(ulong old0, ulong active0, ulong old1, ulong active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == (ulong)0L)
      return jjStartNfa_0(6, (ulong)old0, (ulong)old1); 
   try { curChar = input_stream.readChar(); }
   catch(System.IO.IOException) {
      jjStopStringLiteralDfa_0(7, (ulong)active0, (ulong)active1);
      return 8;
   }
   switch(curChar)
   {
      case ((char) 98):
         return jjMoveStringLiteralDfa9_0(active0, (ulong)0x1000000L, active1, (ulong)0L);
      case ((char) 101):
         if ((active0 & 0x10000L) != (ulong)0L)
            return jjStartNfaWithStates_0(8, 16, 13);
         else if ((active0 & 0x400000L) != (ulong)0L)
            return jjStartNfaWithStates_0(8, 22, 13);
         else if ((active1 & 0x800L) != (ulong)0L)
            return jjStartNfaWithStates_0(8, 75, 13);
         else if ((active1 & 0x100000L) != (ulong)0L)
            return jjStartNfaWithStates_0(8, 84, 13);
         break;
      case ((char) 110):
         if ((active1 & 0x1000L) != (ulong)0L)
            return jjStartNfaWithStates_0(8, 76, 13);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, (ulong)active0, (ulong)active1);
}
private int jjMoveStringLiteralDfa9_0(ulong old0, ulong active0, ulong old1, ulong active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == (ulong)0L)
      return jjStartNfa_0(7, (ulong)old0, (ulong)old1); 
   try { curChar = input_stream.readChar(); }
   catch(System.IO.IOException) {
      jjStopStringLiteralDfa_0(8, (ulong)active0, (ulong)0L);
      return 9;
   }
   switch(curChar)
   {
      case ((char) 108):
         return jjMoveStringLiteralDfa10_0(active0, (ulong)0x1000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, (ulong)active0, (ulong)0L);
}
private int jjMoveStringLiteralDfa10_0(ulong old0, ulong active0)
{
   if (((active0 &= old0)) == (ulong)0L)
      return jjStartNfa_0(8, (ulong)old0, (ulong)0L);
   try { curChar = input_stream.readChar(); }
   catch(System.IO.IOException) {
      jjStopStringLiteralDfa_0(9, (ulong)active0, (ulong)0L);
      return 10;
   }
   switch(curChar)
   {
      case ((char) 101):
         if ((active0 & 0x1000000L) != (ulong)0L)
            return jjStartNfaWithStates_0(10, 24, 13);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, (ulong)active0, (ulong)0L);
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static ulong[] jjbitVec0 = {
   (ulong)0x0L, (ulong)0x0L, (ulong)0xffffffffffffffffL, (ulong)0xffffffffffffffffL
};
static ulong[] jjbitVec1 = {
   (ulong)0x0L, (ulong)0x0L, (ulong)0x0L, (ulong)0x8000000080000000L
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 101;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         ulong l = ((ulong)1L) << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != (ulong)0L)
                     jjCheckNAddStates(0, 5);
                  else if (curChar == 34)
                     jjCheckNAddStates(6, 10);
                  else if (curChar == 39)
                     jjAddStates(11, 12);
                  else if (curChar == 46)
                     jjCheckNAdd(15);
                  else if (curChar == 35)
                     jjCheckNAddTwoStates(1, 2);
                  if ((0x3fe000000000000L & l) != (ulong)0L)
                  {
                     if (kind > 94)
                        kind = 94;
                     jjCheckNAddStates(13, 15);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 94)
                        kind = 94;
                     jjCheckNAdd(39);
                  }
                  if (curChar == 48)
                     jjAddStates(16, 17);
                  break;
               case 101:
                  if ((0x3ff000000000000L & l) != (ulong)0L)
                     jjCheckNAddStates(18, 21);
                  else if ((0x100000200L & l) != (ulong)0L)
                     jjCheckNAddTwoStates(1, 2);
                  break;
               case 1:
                  if ((0x100000200L & l) != (ulong)0L)
                     jjCheckNAddTwoStates(1, 2);
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) != (ulong)0L)
                     jjCheckNAddStates(18, 21);
                  break;
               case 3:
                  if ((0x100000200L & l) != (ulong)0L)
                     jjCheckNAddTwoStates(3, 4);
                  break;
               case 4:
                  if (curChar == 34)
                     jjCheckNAdd(5);
                  break;
               case 5:
                  if ((0xfffffffbffffffffL & l) != (ulong)0L)
                     jjCheckNAddTwoStates(5, 6);
                  break;
               case 6:
                  if (curChar == 34)
                     jjCheckNAddStates(22, 24);
                  break;
               case 7:
                  if (curChar == 10 && kind > 7)
                     kind = 7;
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) != (ulong)0L)
                     jjCheckNAddStates(25, 28);
                  break;
               case 9:
                  if ((0x100000200L & l) != (ulong)0L)
                     jjCheckNAddStates(29, 31);
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) != (ulong)0L)
                     jjCheckNAddTwoStates(10, 7);
                  break;
               case 11:
                  if ((0x100000200L & l) != (ulong)0L)
                     jjCheckNAddStates(32, 36);
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) == (ulong)0L)
                     break;
                  if (kind > 92)
                     kind = 92;
                  jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 14:
                  if (curChar == 46)
                     jjCheckNAdd(15);
                  break;
               case 15:
                  if ((0x3ff000000000000L & l) == (ulong)0L)
                     break;
                  if (kind > 96)
                     kind = 96;
                  jjCheckNAddStates(37, 39);
                  break;
               case 17:
                  if ((0x280000000000L & l) != (ulong)0L)
                     jjCheckNAdd(18);
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) == (ulong)0L)
                     break;
                  if (kind > 96)
                     kind = 96;
                  jjCheckNAddTwoStates(18, 19);
                  break;
               case 20:
                  if (curChar == 39)
                     jjAddStates(11, 12);
                  break;
               case 21:
                  if ((0xffffff7fffffdbffL & l) != (ulong)0L)
                     jjCheckNAdd(22);
                  break;
               case 22:
                  if (curChar == 39 && kind > 98)
                     kind = 98;
                  break;
               case 24:
                  if ((0x8000008400000000L & l) != (ulong)0L)
                     jjCheckNAdd(22);
                  break;
               case 25:
                  if (curChar == 48)
                     jjCheckNAddTwoStates(26, 22);
                  break;
               case 26:
                  if ((0xff000000000000L & l) != (ulong)0L)
                     jjCheckNAddTwoStates(26, 22);
                  break;
               case 27:
                  if ((0x3fe000000000000L & l) != (ulong)0L)
                     jjCheckNAddTwoStates(28, 22);
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) != (ulong)0L)
                     jjCheckNAddTwoStates(28, 22);
                  break;
               case 29:
                  if (curChar == 48)
                     jjAddStates(40, 41);
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) != (ulong)0L)
                     jjCheckNAddTwoStates(31, 22);
                  break;
               case 33:
                  if (curChar == 48)
                     jjAddStates(16, 17);
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) == (ulong)0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  jjAddStates(42, 43);
                  break;
               case 38:
                  if (curChar != 48)
                     break;
                  if (kind > 94)
                     kind = 94;
                  jjCheckNAdd(39);
                  break;
               case 39:
                  if ((0xff000000000000L & l) == (ulong)0L)
                     break;
                  if (kind > 93)
                     kind = 93;
                  jjCheckNAddTwoStates(39, 40);
                  break;
               case 41:
                  if ((0x3fe000000000000L & l) == (ulong)0L)
                     break;
                  if (kind > 94)
                     kind = 94;
                  jjCheckNAddStates(13, 15);
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) == (ulong)0L)
                     break;
                  if (kind > 94)
                     kind = 94;
                  jjCheckNAddTwoStates(42, 43);
                  break;
               case 44:
                  if ((0x3ff000000000000L & l) == (ulong)0L)
                     break;
                  if (kind > 103)
                     kind = 103;
                  jjCheckNAdd(44);
                  break;
               case 45:
                  if ((0x3ff000000000000L & l) != (ulong)0L)
                     jjCheckNAddStates(0, 5);
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) != (ulong)0L)
                     jjCheckNAddTwoStates(46, 47);
                  break;
               case 47:
                  if (curChar != 46)
                     break;
                  if (kind > 96)
                     kind = 96;
                  jjCheckNAddStates(44, 46);
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) == (ulong)0L)
                     break;
                  if (kind > 96)
                     kind = 96;
                  jjCheckNAddStates(44, 46);
                  break;
               case 49:
                  if ((0x3ff000000000000L & l) != (ulong)0L)
                     jjCheckNAddTwoStates(49, 14);
                  break;
               case 50:
                  if ((0x3ff000000000000L & l) != (ulong)0L)
                     jjCheckNAddTwoStates(50, 51);
                  break;
               case 52:
                  if ((0x280000000000L & l) != (ulong)0L)
                     jjCheckNAdd(53);
                  break;
               case 53:
                  if ((0x3ff000000000000L & l) == (ulong)0L)
                     break;
                  if (kind > 97)
                     kind = 97;
                  jjCheckNAddTwoStates(53, 54);
                  break;
               case 56:
                  if (curChar == 39)
                     jjAddStates(47, 48);
                  break;
               case 57:
                  if ((0xffffff7fffffdbffL & l) != (ulong)0L)
                     jjCheckNAdd(58);
                  break;
               case 58:
                  if (curChar == 39 && kind > 99)
                     kind = 99;
                  break;
               case 60:
                  if ((0x8000008400000000L & l) != (ulong)0L)
                     jjCheckNAdd(58);
                  break;
               case 61:
                  if (curChar == 48)
                     jjCheckNAddTwoStates(62, 58);
                  break;
               case 62:
                  if ((0xff000000000000L & l) != (ulong)0L)
                     jjCheckNAddTwoStates(62, 58);
                  break;
               case 63:
                  if ((0x3fe000000000000L & l) != (ulong)0L)
                     jjCheckNAddTwoStates(64, 58);
                  break;
               case 64:
                  if ((0x3ff000000000000L & l) != (ulong)0L)
                     jjCheckNAddTwoStates(64, 58);
                  break;
               case 66:
                  if ((0x3ff000000000000L & l) != (ulong)0L)
                     jjCheckNAddTwoStates(66, 58);
                  break;
               case 67:
                  if (curChar == 48)
                     jjAddStates(49, 50);
                  break;
               case 69:
                  if ((0x3ff000000000000L & l) != (ulong)0L)
                     jjCheckNAddTwoStates(69, 58);
                  break;
               case 71:
                  if (curChar == 34)
                     jjCheckNAddStates(51, 53);
                  break;
               case 72:
                  if ((0xfffffffbffffdbffL & l) != (ulong)0L)
                     jjCheckNAddStates(51, 53);
                  break;
               case 74:
                  if ((0x8000008400000000L & l) != (ulong)0L)
                     jjCheckNAddStates(51, 53);
                  break;
               case 75:
                  if (curChar == 34 && kind > 101)
                     kind = 101;
                  break;
               case 76:
                  if (curChar == 48)
                     jjCheckNAddStates(54, 57);
                  break;
               case 77:
                  if ((0xff000000000000L & l) != (ulong)0L)
                     jjCheckNAddStates(54, 57);
                  break;
               case 78:
                  if ((0x3fe000000000000L & l) != (ulong)0L)
                     jjCheckNAddStates(58, 61);
                  break;
               case 79:
                  if ((0x3ff000000000000L & l) != (ulong)0L)
                     jjCheckNAddStates(58, 61);
                  break;
               case 81:
                  if ((0x3ff000000000000L & l) != (ulong)0L)
                     jjCheckNAddStates(62, 65);
                  break;
               case 82:
                  if (curChar == 48)
                     jjAddStates(66, 67);
                  break;
               case 84:
                  if ((0x3ff000000000000L & l) != (ulong)0L)
                     jjCheckNAddStates(68, 71);
                  break;
               case 86:
                  if (curChar == 34)
                     jjCheckNAddStates(6, 10);
                  break;
               case 87:
                  if ((0xfffffffbffffdbffL & l) != (ulong)0L)
                     jjCheckNAddStates(72, 74);
                  break;
               case 89:
                  if ((0x8000008400000000L & l) != (ulong)0L)
                     jjCheckNAddStates(72, 74);
                  break;
               case 90:
                  if (curChar == 34 && kind > 100)
                     kind = 100;
                  break;
               case 91:
                  if (curChar == 48)
                     jjCheckNAddStates(75, 78);
                  break;
               case 92:
                  if ((0xff000000000000L & l) != (ulong)0L)
                     jjCheckNAddStates(75, 78);
                  break;
               case 93:
                  if ((0x3fe000000000000L & l) != (ulong)0L)
                     jjCheckNAddStates(79, 82);
                  break;
               case 94:
                  if ((0x3ff000000000000L & l) != (ulong)0L)
                     jjCheckNAddStates(79, 82);
                  break;
               case 95:
                  if (curChar == 48)
                     jjAddStates(83, 84);
                  break;
               case 97:
                  if ((0x3ff000000000000L & l) != (ulong)0L)
                     jjCheckNAddStates(85, 88);
                  break;
               case 99:
                  if ((0xfffffffbffffdbffL & l) != (ulong)0L)
                     jjCheckNAddTwoStates(99, 100);
                  break;
               case 100:
                  if (curChar == 34 && kind > 102)
                     kind = 102;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         ulong l = ((ulong)1L) << (curChar & 0x3F);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe87fffffeL & l) != (ulong)0L)
                  {
                     if (kind > 92)
                        kind = 92;
                     jjCheckNAdd(13);
                  }
                  if (curChar == 76)
                     jjAddStates(89, 90);
                  break;
               case 5:
                  jjAddStates(91, 92);
                  break;
               case 12:
               case 13:
                  if ((0x7fffffe87fffffeL & l) == (ulong)0L)
                     break;
                  if (kind > 92)
                     kind = 92;
                  jjCheckNAdd(13);
                  break;
               case 16:
                  if ((0x2000000020L & l) != (ulong)0L)
                     jjAddStates(93, 94);
                  break;
               case 19:
                  if ((0x104000001040L & l) != (ulong)0L && kind > 96)
                     kind = 96;
                  break;
               case 21:
                  if ((0xffffffffefffffffL & l) != (ulong)0L)
                     jjCheckNAdd(22);
                  break;
               case 23:
                  if (curChar == 92)
                     jjAddStates(95, 98);
                  break;
               case 24:
                  if ((0x54404610000000L & l) != (ulong)0L)
                     jjCheckNAdd(22);
                  break;
               case 30:
                  if (curChar == 120)
                     jjCheckNAdd(31);
                  break;
               case 31:
                  if ((0x7e0000007eL & l) != (ulong)0L)
                     jjCheckNAddTwoStates(31, 22);
                  break;
               case 32:
                  if (curChar == 88)
                     jjCheckNAdd(31);
                  break;
               case 34:
                  if (curChar == 120)
                     jjCheckNAdd(35);
                  break;
               case 35:
                  if ((0x7e0000007eL & l) == (ulong)0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  jjCheckNAddTwoStates(35, 36);
                  break;
               case 36:
                  if ((0x20100000201000L & l) != (ulong)0L && kind > 95)
                     kind = 95;
                  break;
               case 37:
                  if (curChar == 88)
                     jjCheckNAdd(35);
                  break;
               case 40:
                  if ((0x20100000201000L & l) != (ulong)0L && kind > 93)
                     kind = 93;
                  break;
               case 43:
                  if ((0x20100000201000L & l) != (ulong)0L && kind > 94)
                     kind = 94;
                  break;
               case 51:
                  if ((0x2000000020L & l) != (ulong)0L)
                     jjAddStates(99, 100);
                  break;
               case 54:
                  if ((0x104000001040L & l) != (ulong)0L && kind > 97)
                     kind = 97;
                  break;
               case 55:
                  if (curChar == 76)
                     jjAddStates(89, 90);
                  break;
               case 57:
                  if ((0xffffffffefffffffL & l) != (ulong)0L)
                     jjCheckNAdd(58);
                  break;
               case 59:
                  if (curChar == 92)
                     jjAddStates(101, 105);
                  break;
               case 60:
                  if ((0x54404610000000L & l) != (ulong)0L)
                     jjCheckNAdd(58);
                  break;
               case 65:
                  if (curChar == 117)
                     jjCheckNAdd(66);
                  break;
               case 66:
                  if ((0x7e0000007eL & l) != (ulong)0L)
                     jjCheckNAddTwoStates(66, 58);
                  break;
               case 68:
                  if (curChar == 120)
                     jjCheckNAdd(69);
                  break;
               case 69:
                  if ((0x7e0000007eL & l) != (ulong)0L)
                     jjCheckNAddTwoStates(69, 58);
                  break;
               case 70:
                  if (curChar == 88)
                     jjCheckNAdd(69);
                  break;
               case 72:
                  if ((0xffffffffefffffffL & l) != (ulong)0L)
                     jjCheckNAddStates(51, 53);
                  break;
               case 73:
                  if (curChar == 92)
                     jjAddStates(106, 110);
                  break;
               case 74:
                  if ((0x54404610000000L & l) != (ulong)0L)
                     jjCheckNAddStates(51, 53);
                  break;
               case 80:
                  if (curChar == 117)
                     jjCheckNAdd(81);
                  break;
               case 81:
                  if ((0x7e0000007eL & l) != (ulong)0L)
                     jjCheckNAddStates(62, 65);
                  break;
               case 83:
                  if (curChar == 120)
                     jjCheckNAdd(84);
                  break;
               case 84:
                  if ((0x7e0000007eL & l) != (ulong)0L)
                     jjCheckNAddStates(68, 71);
                  break;
               case 85:
                  if (curChar == 88)
                     jjCheckNAdd(84);
                  break;
               case 87:
                  if ((0xffffffffefffffffL & l) != (ulong)0L)
                     jjCheckNAddStates(72, 74);
                  break;
               case 88:
                  if (curChar == 92)
                     jjAddStates(111, 114);
                  break;
               case 89:
                  if ((0x54404610000000L & l) != (ulong)0L)
                     jjCheckNAddStates(72, 74);
                  break;
               case 96:
                  if (curChar == 120)
                     jjCheckNAdd(97);
                  break;
               case 97:
                  if ((0x7e0000007eL & l) != (ulong)0L)
                     jjCheckNAddStates(85, 88);
                  break;
               case 98:
                  if (curChar == 88)
                     jjCheckNAdd(97);
                  break;
               case 99:
                  jjAddStates(115, 116);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         ulong l2 = ((ulong)1L) << (curChar & 0x3F);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 13:
                  if ((jjbitVec1[i2] & l2) == (ulong)0L)
                     break;
                  if (kind > 92)
                     kind = 92;
                  jjCheckNAdd(13);
                  break;
               case 5:
                  if ((jjbitVec0[i2] & l2) != (ulong)0L)
                     jjAddStates(91, 92);
                  break;
               case 21:
                  if ((jjbitVec0[i2] & l2) != (ulong)0L)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 57:
                  if ((jjbitVec0[i2] & l2) != (ulong)0L)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 72:
                  if ((jjbitVec0[i2] & l2) != (ulong)0L)
                     jjAddStates(51, 53);
                  break;
               case 87:
                  if ((jjbitVec0[i2] & l2) != (ulong)0L)
                     jjAddStates(72, 74);
                  break;
               case 99:
                  if ((jjbitVec0[i2] & l2) != (ulong)0L)
                     jjAddStates(115, 116);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 101 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(System.IO.IOException) { return curPos; }
   }
}
private int jjStopStringLiteralDfa_1(int pos, ulong active0, ulong active1)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private int jjStartNfa_1(int pos, ulong active0, ulong active1)
{
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, (ulong)active0, (ulong)active1), pos + 1);
}
private int jjStartNfaWithStates_1(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(System.IO.IOException) { return pos + 1; }
   return jjMoveNfa_1(state, pos + 1);
}
private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case ((char) 47):
         return jjMoveStringLiteralDfa1_1((ulong)0x60L, (ulong)0x0L);
      case ((char) 73):
         return jjMoveStringLiteralDfa1_1((ulong)0x0L, (ulong)0x4000000L);
      case ((char) 112):
         return jjMoveStringLiteralDfa1_1((ulong)0x0L, (ulong)0x8000000L);
      default :
         return jjMoveNfa_1(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_1(ulong active0, ulong active1)
{
   try { curChar = input_stream.readChar(); }
   catch(System.IO.IOException) {
      jjStopStringLiteralDfa_1(0, (ulong)active0, (ulong)active1);
      return 1;
   }
   switch(curChar)
   {
      case ((char) 42):
         if ((active0 & 0x40L) != (ulong)0L)
            return jjStopAtPos(1, 6);
         break;
      case ((char) 47):
         if ((active0 & 0x20L) != (ulong)0L)
            return jjStopAtPos(1, 5);
         break;
      case ((char) 68):
         if ((active1 & 0x4000000L) != (ulong)0L)
            return jjStopAtPos(1, 90);
         break;
      case ((char) 114):
         return jjMoveStringLiteralDfa2_1(active0, (ulong)0L, active1, (ulong)0x8000000L);
      default :
         break;
   }
   return jjStartNfa_1(0, (ulong)active0, (ulong)active1);
}
private int jjMoveStringLiteralDfa2_1(ulong old0, ulong active0, ulong old1, ulong active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == (ulong)0L)
      return jjStartNfa_1(0, (ulong)old0, (ulong)old1); 
   try { curChar = input_stream.readChar(); }
   catch(System.IO.IOException) {
      jjStopStringLiteralDfa_1(1, (ulong)0L, (ulong)active1);
      return 2;
   }
   switch(curChar)
   {
      case ((char) 101):
         return jjMoveStringLiteralDfa3_1(active1, (ulong)0x8000000L);
      default :
         break;
   }
   return jjStartNfa_1(1, (ulong)0L, (ulong)active1);
}
private int jjMoveStringLiteralDfa3_1(ulong old1, ulong active1)
{
   if (((active1 &= old1)) == (ulong)0L)
      return jjStartNfa_1(1, (ulong)0L, (ulong)old1); 
   try { curChar = input_stream.readChar(); }
   catch(System.IO.IOException) {
      jjStopStringLiteralDfa_1(2, (ulong)0L, (ulong)active1);
      return 3;
   }
   switch(curChar)
   {
      case ((char) 102):
         return jjMoveStringLiteralDfa4_1(active1, (ulong)0x8000000L);
      default :
         break;
   }
   return jjStartNfa_1(2, (ulong)0L, (ulong)active1);
}
private int jjMoveStringLiteralDfa4_1(ulong old1, ulong active1)
{
   if (((active1 &= old1)) == (ulong)0L)
      return jjStartNfa_1(2, (ulong)0L, (ulong)old1); 
   try { curChar = input_stream.readChar(); }
   catch(System.IO.IOException) {
      jjStopStringLiteralDfa_1(3, (ulong)0L, (ulong)active1);
      return 4;
   }
   switch(curChar)
   {
      case ((char) 105):
         return jjMoveStringLiteralDfa5_1(active1, (ulong)0x8000000L);
      default :
         break;
   }
   return jjStartNfa_1(3, (ulong)0L, (ulong)active1);
}
private int jjMoveStringLiteralDfa5_1(ulong old1, ulong active1)
{
   if (((active1 &= old1)) == (ulong)0L)
      return jjStartNfa_1(3, (ulong)0L, (ulong)old1); 
   try { curChar = input_stream.readChar(); }
   catch(System.IO.IOException) {
      jjStopStringLiteralDfa_1(4, (ulong)0L, (ulong)active1);
      return 5;
   }
   switch(curChar)
   {
      case ((char) 120):
         if ((active1 & 0x8000000L) != (ulong)0L)
            return jjStopAtPos(5, 91);
         break;
      default :
         break;
   }
   return jjStartNfa_1(4, (ulong)0L, (ulong)active1);
}
private int jjMoveNfa_1(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 12;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         ulong l = ((ulong)1L) << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 35)
                     jjCheckNAddTwoStates(1, 2);
                  break;
               case 1:
                  if ((0x100000200L & l) != (ulong)0L)
                     jjCheckNAddTwoStates(1, 2);
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) != (ulong)0L)
                     jjCheckNAddStates(18, 21);
                  break;
               case 3:
                  if ((0x100000200L & l) != (ulong)0L)
                     jjCheckNAddTwoStates(3, 4);
                  break;
               case 4:
                  if (curChar == 34)
                     jjCheckNAdd(5);
                  break;
               case 5:
                  if ((0xfffffffbffffffffL & l) != (ulong)0L)
                     jjCheckNAddTwoStates(5, 6);
                  break;
               case 6:
                  if (curChar == 34)
                     jjCheckNAddStates(22, 24);
                  break;
               case 7:
                  if (curChar == 10 && kind > 7)
                     kind = 7;
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) != (ulong)0L)
                     jjCheckNAddStates(25, 28);
                  break;
               case 9:
                  if ((0x100000200L & l) != (ulong)0L)
                     jjCheckNAddStates(29, 31);
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) != (ulong)0L)
                     jjCheckNAddTwoStates(10, 7);
                  break;
               case 11:
                  if ((0x100000200L & l) != (ulong)0L)
                     jjCheckNAddStates(32, 36);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         ulong l = ((ulong)1L) << (curChar & 0x3F);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 5:
                  jjAddStates(91, 92);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         ulong l2 = ((ulong)1L) << (curChar & 0x3F);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 5:
                  if ((jjbitVec0[i2] & l2) != (ulong)0L)
                     jjAddStates(91, 92);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 12 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(System.IO.IOException) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case ((char) 10):
         return jjStopAtPos(0, 8);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa0_3()
{
   switch(curChar)
   {
      case ((char) 42):
         return jjMoveStringLiteralDfa1_3((ulong)0x400L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_3(ulong active0)
{
   try { curChar = input_stream.readChar(); }
   catch(System.IO.IOException) {
      return 1;
   }
   switch(curChar)
   {
      case ((char) 47):
         if ((active0 & 0x400L) != (ulong)0L)
            return jjStopAtPos(1, 10);
         break;
      default :
         return 2;
   }
   return 2;
}
static int[] jjnextStates = {
   46, 47, 49, 14, 50, 51, 87, 88, 90, 99, 100, 21, 23, 42, 43, 44, 
   34, 37, 2, 3, 4, 7, 7, 8, 11, 9, 10, 7, 8, 9, 10, 7, 
   9, 10, 7, 8, 11, 15, 16, 19, 30, 32, 35, 36, 48, 16, 19, 57, 
   59, 68, 70, 72, 73, 75, 72, 73, 77, 75, 72, 73, 79, 75, 72, 73, 
   81, 75, 83, 85, 72, 73, 84, 75, 87, 88, 90, 87, 88, 92, 90, 87, 
   88, 94, 90, 96, 98, 87, 88, 97, 90, 56, 71, 5, 6, 17, 18, 24, 
   25, 27, 29, 52, 53, 60, 61, 63, 65, 67, 74, 76, 78, 80, 82, 89, 
   91, 93, 95, 99, 100, 
};
public static String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, "\x3b", 
"\x6d\x6f\x64\x75\x6c\x65", "\x7b", "\x7d", "\x69\x6e\x74\x65\x72\x66\x61\x63\x65", 
"\x61\x62\x73\x74\x72\x61\x63\x74", "\x6c\x6f\x63\x61\x6c", "\x3a", "\x2c", "\x3a\x3a", 
"\x76\x61\x6c\x75\x65\x74\x79\x70\x65", "\x63\x75\x73\x74\x6f\x6d", "\x74\x72\x75\x6e\x63\x61\x74\x61\x62\x6c\x65", 
"\x73\x75\x70\x70\x6f\x72\x74\x73", "\x70\x75\x62\x6c\x69\x63", "\x70\x72\x69\x76\x61\x74\x65", 
"\x66\x61\x63\x74\x6f\x72\x79", "\x28", "\x29", "\x69\x6e", "\x63\x6f\x6e\x73\x74", "\x4e\x61\x4e", "\x3d", 
"\x7c", "\x5e", "\x26", "\x3e\x3e", "\x3c\x3c", "\x2b", "\x2d", "\x2a", "\x2f", 
"\x25", "\x7e", "\x54\x52\x55\x45", "\x46\x41\x4c\x53\x45", 
"\x74\x79\x70\x65\x64\x65\x66", "\x6e\x61\x74\x69\x76\x65", "\x66\x6c\x6f\x61\x74", 
"\x64\x6f\x75\x62\x6c\x65", "\x6c\x6f\x6e\x67", "\x73\x68\x6f\x72\x74", 
"\x75\x6e\x73\x69\x67\x6e\x65\x64", "\x63\x68\x61\x72", "\x77\x63\x68\x61\x72", "\x62\x6f\x6f\x6c\x65\x61\x6e", 
"\x6f\x63\x74\x65\x74", "\x61\x6e\x79", "\x4f\x62\x6a\x65\x63\x74", "\x73\x74\x72\x75\x63\x74", 
"\x75\x6e\x69\x6f\x6e", "\x73\x77\x69\x74\x63\x68", "\x63\x61\x73\x65", 
"\x64\x65\x66\x61\x75\x6c\x74", "\x65\x6e\x75\x6d", "\x73\x65\x71\x75\x65\x6e\x63\x65", "\x3c", "\x3e", 
"\x73\x74\x72\x69\x6e\x67", "\x77\x73\x74\x72\x69\x6e\x67", "\x5b", "\x5d", 
"\x72\x65\x61\x64\x6f\x6e\x6c\x79", "\x61\x74\x74\x72\x69\x62\x75\x74\x65", 
"\x65\x78\x63\x65\x70\x74\x69\x6f\x6e", "\x6f\x6e\x65\x77\x61\x79", "\x76\x6f\x69\x64", "\x6f\x75\x74", 
"\x69\x6e\x6f\x75\x74", "\x72\x61\x69\x73\x65\x73", "\x63\x6f\x6e\x74\x65\x78\x74", 
"\x66\x69\x78\x65\x64", "\x56\x61\x6c\x75\x65\x42\x61\x73\x65", "\x49\x6e\x66\x69\x6e\x69\x74\x79", 
"\x2e", "\x64", "\x44", "\x23\x70\x72\x61\x67\x6d\x61", "\x49\x44", 
"\x70\x72\x65\x66\x69\x78", null, null, null, null, null, null, null, null, null, null, null, null, };
public static String[] lexStateNames = {
   "DEFAULT", 
   "PRAGMA_DIRECTIVE", 
   "IN_LINE_COMMENT", 
   "IN_COMMENT", 
};
public static int[] jjnewLexState = {
   -1, -1, -1, -1, -1, 2, 3, -1, 0, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, 
};
static ulong[] jjtoToken = {
   0xfffffffffffff001L, 0xffffffffffL, 
};
static long[] jjtoSkip = {
   0x5feL, 0x0L, 
};
static long[] jjtoMore = {
   0xa00L, 0x0L, 
};
protected SimpleCharStream input_stream;
private uint[] jjrounds = new uint[101];
private int[] jjstateSet = new int[202];
protected char curChar;
public IDLParserTokenManager(SimpleCharStream stream)
{
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public IDLParserTokenManager(SimpleCharStream stream, int lexState) : this(stream)
{
   SwitchTo(lexState);
}
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 101; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 4 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
uint jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(System.IO.IOException)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   catch(System.ObjectDisposedException)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (System.IO.IOException) { goto EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (System.IO.IOException) { goto EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 9)
         {
            jjmatchedKind = 9;
         }
         break;
       case 3:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         if (jjmatchedPos == 0 && jjmatchedKind > 11)
         {
            jjmatchedKind = 11;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & ((ulong)(1L << (jjmatchedKind & 0x3F)))) != (ulong)0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 0x3F))) != 0L)
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           goto EOFLoop;
        }
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (System.IO.IOException) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     bool EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (System.IO.IOException) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

}
