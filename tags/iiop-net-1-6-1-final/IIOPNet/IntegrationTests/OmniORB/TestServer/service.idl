

union TestUnion switch (long) {
    case 0: short val0;
    case 1: 
    case 2: long val1;
    default: boolean val2;
};

enum TestEnumForU {
    A, B, C
};

union TestUnionE switch(TestEnumForU) {
    case A: short valE0;
    case B:
    case C: TestEnumForU valE1;
};

enum TestEnumForU3 {
    A3, B3, C3, D3
};


union TestUnionE3 switch(TestEnumForU3) {    
    case A3: TestEnumForU3 valE0;
    case B3: 
    // test recursive typecode + indirections
    case C3: sequence<TestUnionE3> valE1;
    // test indirections
    case D3: sequence<TestEnumForU3> valE2;
};


struct RecStruct {
    sequence<RecStruct> seq;
};


typedef sequence<wstring> wstringSeq;

typedef sequence<wstringSeq> seqOfWStringSeq;

typedef sequence<long, 3> boundedLongSeq;

typedef long longTD;

struct StructWithTypedefMember {
    longTD longtdField;
};


interface TestService {

    struct InnerStruct {
        long Field1;
    };

    TestUnion EchoTestUnion(in TestUnion arg);
    TestUnionE EchoTestUnionE(in TestUnionE arg);   
    any EchoAny(in any arg);
    any RetrieveUnknownUnion();
    any RetrieveWStringAsAny(in wstring arg);

    any RetrieveStructWithTypedefMember(in long elemVal);
    any RetrieveTypedefedSeq(in long nrOfElems, in long memberVal);

    wchar EchoWChar(in wchar arg);
    wstring EchoWString(in wstring arg);

    // test for forum bug report: idl wstring sequences
    wstringSeq RetrieveWstringSeq(in wstring val, in long nrOfElems);
    wstringSeq EchoWstringSeq(in wstringSeq arg);
    seqOfWStringSeq EchoSeqOfWStringSeq(in seqOfWStringSeq arg);

    boundedLongSeq EchoBoundedSeq(in boundedLongSeq arg);

    InnerStruct EchoInnerStruct(in InnerStruct arg);

    RecStruct EchoRecStruct(in RecStruct arg);
}; 




