/* Generated By:JJTree: Do not edit this line. parser\IDLParserTreeConstants.java */

package parser;

public interface IDLParserTreeConstants
{
  public int JJTVOID = 0;
  public int JJTSPECIFICATION = 1;
  public int JJTDEFINITION = 2;
  public int JJTMODULE = 3;
  public int JJTINTERFACEX = 4;
  public int JJTINTERFACE_DCL = 5;
  public int JJTFORWARD_DCL = 6;
  public int JJTINTERFACE_HEADER = 7;
  public int JJTINTERFACE_BODY = 8;
  public int JJTEXPORT = 9;
  public int JJTINTERFACE_INHERITANCE_SPEC = 10;
  public int JJTINTERFACE_NAME = 11;
  public int JJTSCOPED_NAME = 12;
  public int JJTVALUE = 13;
  public int JJTVALUE_FORWARD_DECL = 14;
  public int JJTVALUE_BOX_DECL = 15;
  public int JJTVALUE_ABS_DECL = 16;
  public int JJTVALUE_DECL = 17;
  public int JJTVALUE_HEADER = 18;
  public int JJTVALUE_BASE_INHERITANCE_SPEC = 19;
  public int JJTVALUE_SUPPORT_INHERITANCE_SPEC = 20;
  public int JJTVALUE_NAME = 21;
  public int JJTVALUE_ELEMENT = 22;
  public int JJTSTATE_MEMBER = 23;
  public int JJTINIT_DECL = 24;
  public int JJTINIT_PARAM_DELCS = 25;
  public int JJTINIT_PARAM_DECL = 26;
  public int JJTINIT_PARAM_ATTRIBUTE = 27;
  public int JJTCONST_DCL = 28;
  public int JJTCONST_TYPE = 29;
  public int JJTCONST_EXP = 30;
  public int JJTOR_EXPR = 31;
  public int JJTXOR_EXPR = 32;
  public int JJTAND_EXPR = 33;
  public int JJTSHIFT_EXPR = 34;
  public int JJTADD_EXPR = 35;
  public int JJTMULT_EXPR = 36;
  public int JJTUNARY_EXPR = 37;
  public int JJTPRIMARY_EXPR = 38;
  public int JJTLITERAL = 39;
  public int JJTPOSITIVE_INT_CONST = 40;
  public int JJTTYPE_DCL = 41;
  public int JJTTYPE_DECLARATOR = 42;
  public int JJTTYPE_SPEC = 43;
  public int JJTSIMPLE_TYPE_SPEC = 44;
  public int JJTBASE_TYPE_SPEC = 45;
  public int JJTTEMPLATE_TYPE_SPEC = 46;
  public int JJTCONSTR_TYPE_SPEC = 47;
  public int JJTDECLARATORS = 48;
  public int JJTDECLARATOR = 49;
  public int JJTSIMPLE_DECLARATOR = 50;
  public int JJTCOMPLEX_DECLARATOR = 51;
  public int JJTFLOATING_PT_TYPE = 52;
  public int JJTFLOATING_PT_TYPE_FLOAT = 53;
  public int JJTFLOATING_PT_TYPE_DOUBLE = 54;
  public int JJTFLOATING_PT_TYPE_LONGDOUBLE = 55;
  public int JJTINTEGER_TYPE = 56;
  public int JJTSIGNED_INT = 57;
  public int JJTSIGNED_SHORT_INT = 58;
  public int JJTSIGNED_LONG_INT = 59;
  public int JJTSIGNED_LONGLONG_INT = 60;
  public int JJTUNSIGNED_INT = 61;
  public int JJTUNSIGNED_SHORT_INT = 62;
  public int JJTUNSIGNED_LONG_INT = 63;
  public int JJTUNSIGNED_LONGLONG_INT = 64;
  public int JJTCHAR_TYPE = 65;
  public int JJTWIDE_CHAR_TYPE = 66;
  public int JJTBOOLEAN_TYPE = 67;
  public int JJTOCTET_TYPE = 68;
  public int JJTANY_TYPE = 69;
  public int JJTOBJECT_TYPE = 70;
  public int JJTSTRUCT_TYPE = 71;
  public int JJTMEMBER_LIST = 72;
  public int JJTMEMBER = 73;
  public int JJTUNION_TYPE = 74;
  public int JJTSWITCH_TYPE_SPEC = 75;
  public int JJTSWITCH_BODY = 76;
  public int JJTCASEX = 77;
  public int JJTCASE_LABEL = 78;
  public int JJTELEMENT_SPEC = 79;
  public int JJTENUM_TYPE = 80;
  public int JJTENUMERATOR = 81;
  public int JJTSEQUENCE_TYPE = 82;
  public int JJTSTRING_TYPE = 83;
  public int JJTWIDE_STRING_TYPE = 84;
  public int JJTARRAY_DECLARATOR = 85;
  public int JJTFIXED_ARRAY_SIZE = 86;
  public int JJTATTR_DCL = 87;
  public int JJTEXCEPT_DCL = 88;
  public int JJTOP_DCL = 89;
  public int JJTOP_TYPE_SPEC = 90;
  public int JJTPARAMETER_DCLS = 91;
  public int JJTPARAM_DCL = 92;
  public int JJTPARAM_ATTRIBUTE = 93;
  public int JJTRAISES_EXPR = 94;
  public int JJTCONTEXT_EXPR = 95;
  public int JJTPARAM_TYPE_SPEC = 96;
  public int JJTFIXED_PT_TYPE = 97;
  public int JJTFIXED_PT_CONST_TYPE = 98;
  public int JJTVALUE_BASE_TYPE = 99;


  public String[] jjtNodeName = {
    "void",
    "specification",
    "definition",
    "module",
    "interfacex",
    "interface_dcl",
    "forward_dcl",
    "interface_header",
    "interface_body",
    "export",
    "interface_inheritance_spec",
    "interface_name",
    "scoped_name",
    "value",
    "value_forward_decl",
    "value_box_decl",
    "value_abs_decl",
    "value_decl",
    "value_header",
    "value_base_inheritance_spec",
    "value_support_inheritance_spec",
    "value_name",
    "value_element",
    "state_member",
    "init_decl",
    "init_param_delcs",
    "init_param_decl",
    "init_param_attribute",
    "const_dcl",
    "const_type",
    "const_exp",
    "or_expr",
    "xor_expr",
    "and_expr",
    "shift_expr",
    "add_expr",
    "mult_expr",
    "unary_expr",
    "primary_expr",
    "literal",
    "positive_int_const",
    "type_dcl",
    "type_declarator",
    "type_spec",
    "simple_type_spec",
    "base_type_spec",
    "template_type_spec",
    "constr_type_spec",
    "declarators",
    "declarator",
    "simple_declarator",
    "complex_declarator",
    "floating_pt_type",
    "floating_pt_type_float",
    "floating_pt_type_double",
    "floating_pt_type_longdouble",
    "integer_type",
    "signed_int",
    "signed_short_int",
    "signed_long_int",
    "signed_longlong_int",
    "unsigned_int",
    "unsigned_short_int",
    "unsigned_long_int",
    "unsigned_longlong_int",
    "char_type",
    "wide_char_type",
    "boolean_type",
    "octet_type",
    "any_type",
    "object_type",
    "struct_type",
    "member_list",
    "member",
    "union_type",
    "switch_type_spec",
    "switch_body",
    "casex",
    "case_label",
    "element_spec",
    "enum_type",
    "enumerator",
    "sequence_type",
    "string_type",
    "wide_string_type",
    "array_declarator",
    "fixed_array_size",
    "attr_dcl",
    "except_dcl",
    "op_dcl",
    "op_type_spec",
    "parameter_dcls",
    "param_dcl",
    "param_attribute",
    "raises_expr",
    "context_expr",
    "param_type_spec",
    "fixed_pt_type",
    "fixed_pt_const_type",
    "value_base_type",
  };
}
